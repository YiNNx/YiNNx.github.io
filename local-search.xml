<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Record</title>
    <link href="/2022/03/19/Bingyan/"/>
    <url>/2022/03/19/Bingyan/</url>
    
    <content type="html"><![CDATA[<p>三月十九号深夜十二点零三分，现在一整个人都处于很恍惚的状态</p>  <img src="/img/iFleaBooks/0.png" style="zoom:50%;" /><p>这周实习的收获太大了（虽然翘掉了两节微积分，但是管它呢</p><p>从一开始连API应该长啥样都不知道，对着任务书发懵，到最终实现了OAuth2.0的Server端和Client端</p><p>我居然真的做到了！</p><p>疯狂学习Flask，努力上手MySQL和SQLAlchemy，学习Request和Response的机制…</p><p>写第二、四阶段确实是很痛苦的过程，感觉压根就实现不出来，还是只能硬着头皮写，一个接一个地解决形态各异的bug。但最终还是迎来了漫漫长夜后的曙光。</p><p>这周无论是学到的东西还是做出来的东西，我都非常非常满意了。</p><hr><h1 id="Learning-Log"><a href="#Learning-Log" class="headerlink" title="Learning Log"></a>Learning Log</h1><h4 id="day-0-3-11"><a href="#day-0-3-11" class="headerlink" title="day 0___3.11"></a>day 0___3.11</h4><ul><li>确定选题OAuth2.0</li><li>Github 初始化 Repository 、创建learninglog &amp; 思考下框架 &amp; 搞定git</li></ul><h4 id="day-1-3-12"><a href="#day-1-3-12" class="headerlink" title="day 1___3.12"></a>day 1___3.12</h4><blockquote><ul><li><p><input checked="" disabled="" type="checkbox"> <del>加入Bangumi并被安利双城之战</del></p></li><li><p><input checked="" disabled="" type="checkbox"> 学习Flask框架的使用</p><p><a href="https://dormousehole.readthedocs.io/en/1.1.2/quickstart.html">Flask中文文档</a></p><p><a href="https://zhuanlan.zhihu.com/p/44859752">Flask 基础篇</a></p><p><a href="https://segmentfault.com/a/1190000008404692">使用 Flask 开发 Web 应用（一）</a></p></li><li><p><input checked="" disabled="" type="checkbox"> 学习如何实现API</p><p><a href="https://www.jianshu.com/p/33160c224732">用Python 的Flask实现 RESTful API(学习篇)</a></p></li><li><p><input disabled="" type="checkbox"> 系统学一下MySQL</p><p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384">廖雪峰的官方网站</a></p></li></ul></blockquote><p>今天大部分的时间都花在了学习Flask框架和API开发上面。之前从来没接触过API这个概念，也从没仔细思考过前后端应该通过什么样的方式分离。因此尝试了解API之后感觉打开了新世界的大门。但刚开始上手写时还是毫无头绪。之前写的iFleaBooks那个小项目里虽然也涉及用户的注册登录什么的，但都运行在本地命令行，逻辑非常之简单，控制输入输出就行了。而API中使用web请求和响应实现数据传输与处理，如何通过Flask实现这一过程还是感觉有点没完全掌握。</p><h4 id="day-2-3-13"><a href="#day-2-3-13" class="headerlink" title="day 2___3.13"></a>day 2___3.13</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 继续学Flask，把官方文档看完</li><li><input checked="" disabled="" type="checkbox"> 看完MySQL</li><li><input disabled="" type="checkbox"> 完成SQLAlchemy部分</li><li><input checked="" disabled="" type="checkbox"> 完成注册登录的错误输入处理</li><li><input disabled="" type="checkbox"> 琢磨一下邮箱验证</li></ul></blockquote><p>学了一上午数据库，尝试使用Python进行数据库操作的过程也还算顺利，也没有出现什么令人崩溃的bug。</p><p>继续进行SQLALchemy的操作。</p><h4 id="day-3-3-14"><a href="#day-3-3-14" class="headerlink" title="day 3___3.14"></a>day 3___3.14</h4><blockquote><ul><li><p><input checked="" disabled="" type="checkbox"> SQLAlchemy完成</p></li><li><p><input checked="" disabled="" type="checkbox"> 了解 <a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">OAuth2.0</a> 机制 &amp; 具体过程</p></li></ul></blockquote><p>被bug按在地上反复摩擦的一天…..上午总算是把阶段一粗糙地完成了。为什么感觉起来很简单但写起来还是超难。进度很显然太慢了。开始研究OAuth2.0。</p><p>不过值得一提的是成功实现了科学上网！在StackOverflow上查到了好几个bug的解决方法，以及google到了code和token的原理，真的很好用了。</p><h4 id="day-4-3-15"><a href="#day-4-3-15" class="headerlink" title="day 4__3.15"></a>day 4__3.15</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> OAuth2.0 第三⽅⽹站注册</li><li><input checked="" disabled="" type="checkbox"> OAuth2.0 处理 Client ID 和 回调链接，redirect并返回 code </li><li><input checked="" disabled="" type="checkbox"> OAuth2.0 处理 Client ID 、 Client secrets 和 code，向第三⽅⽹站提供对应⽤⼾的 token</li></ul></blockquote><p>在逻辑上完成了OAuth2.0第二阶段部分。</p><h4 id="day-5-3-16"><a href="#day-5-3-16" class="headerlink" title="day 5__3.16"></a>day 5__3.16</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> OAuth2.0 调试</li><li><input checked="" disabled="" type="checkbox"> 番剧查看和收藏功能</li><li><input disabled="" type="checkbox"> 搜索收藏的番剧</li></ul></blockquote><p>有一种熬过黑暗迎来黎明的感觉。OAuth2.0实在太难写了，昨天写得整个人丧心病狂丧失希望，但还是坚持捋顺逻辑写了下去。今天调试出来好像流程都能对上</p><p>第三阶段部分相比之下就简单快乐很之多，下午加晚上除了搜索部分，其他基本功能都完成差不多了。</p><h4 id="day-6-3-17"><a href="#day-6-3-17" class="headerlink" title="day 6__3.17"></a>day 6__3.17</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 完成第三阶段基本要求</li><li><input checked="" disabled="" type="checkbox"> 添加注册的邮箱验证功能</li><li><input checked="" disabled="" type="checkbox"> 改一下第一阶段</li><li><input checked="" disabled="" type="checkbox"> 第四阶段：用户跳转授权时后端获取token、使用token连接Bangumi的api</li></ul></blockquote><p>今天应该是收获最大的一天。无论是实现邮箱验证功能还是实现OAuth2.0的Client，感觉自己对其中所涉及知识和原理的理解越来越深刻了。</p><p>以及StackOverFlow太好用了 又成功解决好几个bug</p><h4 id="day-7-3-18"><a href="#day-7-3-18" class="headerlink" title="day 7___3.18"></a>day 7___3.18</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 第四阶段完成绑定账号后的数据导入</li><li><input checked="" disabled="" type="checkbox"> 重新捋一下第二阶段（获取code时的get&amp;post）</li><li><input checked="" disabled="" type="checkbox"> 最终debug</li></ul></blockquote><p>最后一天。好舍不得啊感觉。算是把四个阶段都基本完成啦，虽然很多环节都不算太完美，但已经很满足了</p><hr><h1 id="Bangumoe的OAuth2-0服务"><a href="#Bangumoe的OAuth2-0服务" class="headerlink" title="Bangumoe的OAuth2.0服务"></a>Bangumoe的OAuth2.0服务</h1><p>提供⽤⼾注册并管理⾃⼰的基本信息的功能，同时对外提供OAuth2.0的服务。 </p><h4 id="阶段⼀"><a href="#阶段⼀" class="headerlink" title="阶段⼀"></a>阶段⼀</h4><p>实现最基本的⽤⼾注册（邮箱验证）、登录和修改信息的API。</p><h4 id="阶段⼆"><a href="#阶段⼆" class="headerlink" title="阶段⼆"></a>阶段⼆</h4><p>实现OAuth2.0 Server。</p><h4 id="阶段三"><a href="#阶段三" class="headerlink" title="阶段三"></a>阶段三</h4><p>参考bangumi，提供⼀个番剧收藏功能。 </p><h4 id="阶段四"><a href="#阶段四" class="headerlink" title="阶段四"></a>阶段四</h4><p>提供绑定bangumi账号的API，在绑定之后，将bangumi的对应数据同步到对应⽤⼾的数据中。 （OAuth2.0 Client）</p><h2 id="OAuth2-0-Server"><a href="#OAuth2-0-Server" class="headerlink" title="OAuth2.0 Server:"></a>OAuth2.0 Server:</h2><ol><li><p>client在<code>/aouth2.0/sign</code>注册应用，自定义密匙，获得client ID</p></li><li><p>进行第三方登录时，用户跳转到授权页<code>http://127.0.0.1:5000/oauth2.0/show?client_id=xxxxxxxx&amp;redirect_url=http://xxxxxx/redirect</code>，并登录：</p><figure class="highlight perl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs perl">&#123; <br><br><span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;2333@moe.com&quot;</span>, <br><br><span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;233333&quot;</span> <br><br>&#125;<br></code></pre></td></tr></table></figure><p>server确认信息后回调redirect_url，并返回code：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123; <br><br>&quot;<span class="hljs-selector-tag">code</span>&quot;:<br><span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsImlhdCI6MTY0NzU3OTc2OSwiZXhwIjoxNjQ3NTgwMzY5fQ.Mw.ajuLe4SskMkCVK_aIlUIjetDoUndZ3F92rW_ud6BjRdLSniuSKum2xPrtQvQrCK1V3yVq9gBJSwGKWnYamDqQ&quot;</span> <br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>client获取code后，向<code>/oauth2.0/granttoken</code>发送client_id、client_secrets和code：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-attr">&quot;client_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IPfapHgWOn58ycjMCRBD&quot;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-attr">&quot;client_secrets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsImlhdCI6MTY0NzU4MDg4OCwiZXhwIjoxNjQ3NTgxNDg4fQ.Mw.dUPFfwWfPsyzijw5lGnx6VuaKlYBb21zlSycCkyFRVpjjEAGR2gQejmR7hWi_2JXjYAPmPoyBpkV4D6LuTGarg&quot;</span><br>    <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>server返回用户对应的token。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsImlhdCI6MTY0NzU4MDk0NiwiZXhwIjoxNjQ3NTg0NTQ2fQ.eyJlbWFpbCI6IjIzMzNAbW9lLmNvbSIsInVpZCI6M30.Kl_pri4sOp9ErP2yseuy-h_q4_884Qit6yEI0U4akUoDnBl4e6r3tmHVJj3MR5YQ7O7KmSEZAu_H-6VuD_nj7w&quot;</span><br>    <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>获取用户信息的api：<code>/aouth2.0/getinfo</code></p><p>向<code>/aouth2.0/getinfo</code>发送token</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsImlhdCI6MTY0NzU4MDk0NiwiZXhwIjoxNjQ3NTg0NTQ2fQ.eyJlbWFpbCI6IjIzMzNAbW9lLmNvbSIsInVpZCI6M30.Kl_pri4sOp9ErP2yseuy-h_q4_884Qit6yEI0U4akUoDnBl4e6r3tmHVJj3MR5YQ7O7KmSEZAu_H-6VuD_nj7w&quot;</span><br>    <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>server返回：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>    <span class="hljs-string">&quot;avator&quot;</span>: <span class="hljs-string">&quot;https://bangumi.tv/user/675222&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;2333@moe.com&quot;</span>,<br>    <span class="hljs-string">&quot;intro&quot;</span>: <span class="hljs-string">&quot;here is moee&quot;</span>,<br>    <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;moee&quot;</span>,<br>    <span class="hljs-string">&quot;uname&quot;</span>: <span class="hljs-string">&quot;2333@moe.com&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="OAuth2-0-Client"><a href="#OAuth2-0-Client" class="headerlink" title="OAuth2.0 Client:"></a>OAuth2.0 Client:</h2><ol><li><p>用户点击”绑定第三方bangumi账号“，跳转到bangumi授权页</p><p><code>https://bgm.tv/oauth/authorize?client_id=bgm22106232fa6225d8a&amp;response_type=code&amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A5000%2Foauth%2Fredirect</code></p><p>进行授权。</p></li><li><p>用户成功授权后Bangumi Server跳转回redirect_uri（<code>http://127.0.0.1:5000/oauth2.0/redirect</code>），并返回code。</p></li><li><p>Client接收code，并向<code>https://bgm.tv/oauth/access_token</code>使用code换取token：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST https:<span class="hljs-regexp">//</span>bgm.tv<span class="hljs-regexp">/oauth/</span>access_token<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br>      <span class="hljs-string">&quot;grant_type&quot;</span>: <span class="hljs-string">&quot;authorization_code&quot;</span>,<br>      <span class="hljs-string">&quot;client_id&quot;</span>: &#x27;bgm<span class="hljs-number">22106232</span>fa<span class="hljs-number">6225</span>d8a&#x27;,<br>      <span class="hljs-string">&quot;client_secret&quot;</span>: &#x27;<span class="hljs-number">7402491845</span>d1b66ce<span class="hljs-number">1360</span>c<span class="hljs-number">3329</span>3b472a&#x27;,<br>      <span class="hljs-string">&quot;code&quot;</span>: code,<br>      <span class="hljs-string">&quot;redirect_uri&quot;</span>: &#x27;http://127.0.0.1:<span class="hljs-number">5000</span>/oauth/redirect&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>接收到Server返回的access_token：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxxxxxxx&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;expires_in&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">604800</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;token_type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Bearer&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;refresh_token&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxxxxxxx&quot;</span><br>    <span class="hljs-attr">&quot;user_id&quot;</span> <span class="hljs-punctuation">:</span> xxxxx<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>Client将获取的access_token写入数据库，利用bangumi提供的api导入用户番剧收藏数据。</p><p>(bangumi提供的api似乎有点bug，没法正常导出番剧评论，但番剧名和状态是可以正常导出的)</p></li></ol><h2 id="邮箱验证："><a href="#邮箱验证：" class="headerlink" title="邮箱验证："></a>邮箱验证：</h2><p>利用Flask的<strong>Flask-Mail</strong>扩展向用户发送验证邮件</p><p>token使用itsdangerous的TimedJSONWebSignatureSerializer()生成，有效期为10分钟</p><p>用户点击验证链接，server接收到token进行解析，判断uid与session中的uid是否相符，相符则验证成功</p><h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h2><p>MySQL + SQLAlchemy</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+--------------------+</span><br><span class="hljs-section">| Tables_in_bangumoe |</span><br><span class="hljs-section">+--------------------+</span><br>| users              |<br>| info               |<br>| oauth              |<br>| anime              |<br><span class="hljs-section">| collection         |</span><br><span class="hljs-section">+--------------------+</span><br></code></pre></td></tr></table></figure><p>users：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+--------------+--------------+------+-----+---------+----------------+<br>|<span class="hljs-string"> Field        </span>|<span class="hljs-string"> Type         </span>|<span class="hljs-string"> Null </span>|<span class="hljs-string"> Key </span>|<span class="hljs-string"> Default </span>|<span class="hljs-string"> Extra          </span>|<br>+--------------+--------------+------+-----+---------+----------------+<br>|<span class="hljs-string"> uid          </span>|<span class="hljs-string"> int          </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> PRI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> auto_increment </span>|<br>|<span class="hljs-string"> uname        </span>|<span class="hljs-string"> varchar(32)  </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> UNI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> email        </span>|<span class="hljs-string"> varchar(64)  </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> UNI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> pword_hash   </span>|<span class="hljs-string"> varchar(511) </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> MUL </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> statu        </span>|<span class="hljs-string"> int          </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> 0       </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> access_token </span>|<span class="hljs-string"> varchar(64)  </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> 0       </span>|<span class="hljs-string">                </span>|<br>+--------------+--------------+------+-----+---------+----------------+<br></code></pre></td></tr></table></figure><p>oauth：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+----------+--------------+------+-----+---------+----------------+<br>|<span class="hljs-string"> Field    </span>|<span class="hljs-string"> Type         </span>|<span class="hljs-string"> Null </span>|<span class="hljs-string"> Key </span>|<span class="hljs-string"> Default </span>|<span class="hljs-string"> Extra          </span>|<br>+----------+--------------+------+-----+---------+----------------+<br>|<span class="hljs-string"> id       </span>|<span class="hljs-string"> int          </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> PRI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> auto_increment </span>|<br>|<span class="hljs-string"> appname  </span>|<span class="hljs-string"> varchar(255) </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> homeURL  </span>|<span class="hljs-string"> varchar(255) </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> appDesc  </span>|<span class="hljs-string"> varchar(255) </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> backURL  </span>|<span class="hljs-string"> varchar(255) </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> clientID </span>|<span class="hljs-string"> varchar(255) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> secrets  </span>|<span class="hljs-string"> varchar(255) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>+----------+--------------+------+-----+---------+----------------+<br></code></pre></td></tr></table></figure><p>anime：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+----------+-------------+------+-----+---------+----------------+<br>|<span class="hljs-string"> Field    </span>|<span class="hljs-string"> Type        </span>|<span class="hljs-string"> Null </span>|<span class="hljs-string"> Key </span>|<span class="hljs-string"> Default </span>|<span class="hljs-string"> Extra          </span>|<br>+----------+-------------+------+-----+---------+----------------+<br>|<span class="hljs-string"> id       </span>|<span class="hljs-string"> int         </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> PRI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> auto_increment </span>|<br>|<span class="hljs-string"> name     </span>|<span class="hljs-string"> varchar(64) </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> episode  </span>|<span class="hljs-string"> int         </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> director </span>|<span class="hljs-string"> varchar(64) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>+----------+-------------+------+-----+---------+----------------+<br></code></pre></td></tr></table></figure><p>collection：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+---------+--------------+------+-----+---------+----------------+<br>|<span class="hljs-string"> Field   </span>|<span class="hljs-string"> Type         </span>|<span class="hljs-string"> Null </span>|<span class="hljs-string"> Key </span>|<span class="hljs-string"> Default </span>|<span class="hljs-string"> Extra          </span>|<br>+---------+--------------+------+-----+---------+----------------+<br>|<span class="hljs-string"> id      </span>|<span class="hljs-string"> int          </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> PRI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string"> auto_increment </span>|<br>|<span class="hljs-string"> uid     </span>|<span class="hljs-string"> int          </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> name    </span>|<span class="hljs-string"> varchar(64)  </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> statu   </span>|<span class="hljs-string"> varchar(32)  </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> score   </span>|<span class="hljs-string"> int          </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>|<span class="hljs-string"> comment </span>|<span class="hljs-string"> varchar(256) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">                </span>|<br>+---------+--------------+------+-----+---------+----------------+<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NCP</title>
    <link href="/2022/03/03/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/03/03/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="网络通信协议"><a href="#网络通信协议" class="headerlink" title="网络通信协议"></a>网络通信协议</h2><p>网络通信协议是一种网络通用语言，为连接不同操作系统和不同硬件体系结构的互联网络引提供通信支持。协议定义了数据单元使用的格式，信息单元应该包含的信息与含义，连接方式，信息发送和接收的时序，从而确保网络中数据顺利地传送到确定的地方。</p><p>通信协议采用分层的结构，各层协议之间既相互独立又相互高效的协调工作。所有了解网络的同学都知道的的就是OSI七层模型和TCP&#x2F;IP四层模型。OSI七层是理论模型，实际使用的是TCP&#x2F;IP四层模型。</p><p><img src="https://pica.zhimg.com/80/v2-2a82bbd54998e6988c6842048643a31a_1440w.jpg?source=1940ef5c" alt="img"></p><p>发送的信息会从上往下经过每一层进行封装，通过不同协议封装最终通过网线传输到对方电脑，然后对方电脑从下往上一层一层进行解封装，最终数据到达对方应用层对应的软件。</p><p>常用的通信协议有：</p><p>TCP&#x2F;IP、802.11等。</p><p>TCP&#x2F;IP不仅包含TCP和IP协议，还有ARP、ICMP、FTP等协议。</p><p>无线网络协议和有线网络协议的转换通过交换机中数据的解封装以及再封装功能一样来实现。</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP（超文本传输协议）是一个基于请求与响应模式的、无状态的、应用层的协议，常基于TCP的连接方式，HTTP1.1版本中给出一种持续连接的机制，绝大多数的Web开发，都是构建在HTTP协议之上的Web应用。</p><p><strong>主要特点：</strong><br>1.支持客户&#x2F;服务器模式。<br>2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。<br>3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。<br>4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><p><strong>HTTP请求</strong></p><p>  http请求由三部分组成，分别是：请求行、消息报头、请求正文。</p><p>1、请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本。</p><p>请求方法如下：<br>GET   请求获取Request-URI所标识的资源<br>POST  在Request-URI所标识的资源后附加新的数据<br>HEAD  请求获取由Request-URI所标识的资源的响应消息报头<br>PUT   请求服务器存储一个资源，并用Request-URI作为其标识<br>DELETE 请求服务器删除Request-URI所标识的资源<br>TRACE  请求服务器回送收到的请求信息，主要用于测试或诊断<br>CONNECT 保留将来使用<br>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求</p><p><strong>HTTP响应</strong></p><p>在接收和解释请求消息后，服务器返回一个HTTP响应消息。</p><p>HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文<br>常见状态代码、状态描述：</p><figure class="highlight basic"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">200 </span>OK   //客户端请求成功<br><span class="hljs-symbol">400 </span>Bad Request //客户端请求有语法错误，不能被服务器所理解<br><span class="hljs-symbol">401 </span>Unauthorized //请求未经授权<br><span class="hljs-symbol">403 </span>Forbidden //服务器收到请求，但是拒绝提供服务<br><span class="hljs-symbol">404 </span><span class="hljs-keyword">Not</span> Found //请求资源不存在，eg：输入了错误的URL<br><span class="hljs-symbol">500 </span>Internal Server <span class="hljs-keyword">Error</span> //服务器发生不可预期的错误<br><span class="hljs-symbol">503 </span>Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
      <category>Web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Note for Python 02</title>
    <link href="/2022/02/16/PygameNote/"/>
    <url>/2022/02/16/PygameNote/</url>
    
    <content type="html"><![CDATA[<h1 id="Pygame"><a href="#Pygame" class="headerlink" title="Pygame"></a>Pygame</h1><blockquote><p><a href="https://www.pygame.org/docs/">官方文档 </a></p></blockquote><h3 id="1-模块常用内容"><a href="#1-模块常用内容" class="headerlink" title="1.模块常用内容"></a>1.模块常用内容</h3><h4 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h4><ul><li><strong>init()：</strong> 初始化程序</li><li><strong>quit()：</strong> 卸载所有模块</li></ul><h4 id="子模块-amp-函数："><a href="#子模块-amp-函数：" class="headerlink" title="子模块 &amp; 函数："></a>子模块 &amp; 函数：</h4><ul><li><strong>display模块</strong><ul><li><strong>set_caption()</strong> ：设置窗口标题</li><li><strong>set_mode()</strong> ：创建图形类型Surface对象</li><li><strong>set_icon()</strong> ：设置左上角的游戏图标，图标尺寸大小为 32*32。</li><li><strong>flip()</strong> ：更新屏幕内容</li></ul></li><li><strong>event模块</strong><ul><li><strong>get()</strong> ：获取事件</li></ul></li><li><strong>font模块</strong><ul><li><strong>Font()</strong> ：创建Font对象</li></ul></li><li><strong>time模块</strong><ul><li><strong>pygame.time.get_ticks()</strong> ：以毫秒为单位获取时间</li><li><strong>pygame.time.wait()</strong> ：使程序暂停一段时间</li><li><strong>pygame.time.set_timer()</strong> ：创建一个定时器，即每隔一段时间，去执行一些动作</li><li><strong>pygame.time.Clock()</strong> ：创建一个时钟对象来帮我们确定游戏要以多大的帧数运行</li></ul></li><li><strong>image模块</strong><ul><li><strong>load()</strong> ：将图像返回为一个Surface对象</li></ul></li></ul><h4 id="类-amp-方法："><a href="#类-amp-方法：" class="headerlink" title="类 &amp; 方法："></a>类 &amp; 方法：</h4><ul><li><p><strong>Surface类</strong></p><ul><li><strong>Surface(size&#x3D;(width,height),flags,depth)</strong> ：创建一个surface类</li><li><strong>fill()</strong> ：填充颜色</li><li><strong>set_alpha()</strong> ：设置整个图像的透明度</li><li><strong>blit()</strong> ：拼接Surface对象，第一个参数为一个Surface对象表内容，第二个参数为一个Rect对象表位置</li><li><strong>scroll()</strong> ：复制并移动 Surface 对象</li><li><strong>subsurface()</strong> ：根据父对象创建一个新的子 Surface 对象</li><li><strong>get_rect()</strong> ：获得自身表rect区域坐标的Rect对象</li></ul></li><li><p><strong>Font类</strong></p><ul><li><strong>render()</strong> ：创建文本类型Surface对象</li></ul></li><li><p><strong>Rect类</strong></p><ul><li><strong>Rect(left,top,width,height)</strong> ：创建一个Rect类，表示窗口上的一块矩形区域</li><li><strong>center</strong>：表显示中心坐标</li></ul></li><li><p><strong>Event类</strong></p><ul><li><strong>type</strong></li></ul></li></ul><h3 id="2-初始化程序"><a href="#2-初始化程序" class="headerlink" title="2. 初始化程序"></a>2. 初始化程序</h3><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python">pygame.init()<br></code></pre></td></tr></table></figure><p>它的作用是自动检测 Pygame 软件包是否正常可用，并检查电脑的硬件调用接口、基础功能是否存在问题，比如音频、光驱、声卡驱动等设备。同时，它会完成 <strong>Pygame 中所有模块的初始化操作</strong>，比如 display（显示模块）、font（字体模块）、mixer（声音控制模块）、cursors（光标控制模块）等。</p><h3 id="3-创建Surface对象"><a href="#3-创建Surface对象" class="headerlink" title="3. 创建Surface对象"></a>3. 创建Surface对象</h3><p><strong>创建一个 surface 对象：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">screen = pygame.display.set_mode((<span class="hljs-number">800</span>,<span class="hljs-number">600</span>))<br></code></pre></td></tr></table></figure><p><strong>设置背景颜色</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">screen</span>.fill((<span class="hljs-number">138</span>,<span class="hljs-number">151</span>,<span class="hljs-number">146</span>))<br></code></pre></td></tr></table></figure><p>screen 是一个 Surface 对象，它是游戏的主窗口，任何其他的 Surface 对象都需要附着于此。</p><p>创建包含文本的 Surface 对象，然后将它绘制在主屏幕上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建一个包含文字的Surface对象</span><br>text = f.render(<span class="hljs-string">&quot;Hello, world!&quot;</span>,<span class="hljs-literal">True</span>,(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br><span class="hljs-comment">#通过blit方法将其绘制在主屏幕上，textRect表示位置坐标</span><br>screen.blit(text,textRect)<br></code></pre></td></tr></table></figure><p><strong>创建一个图像的Surface对象</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">surface_image =pygame.image.load(<span class="hljs-string">&quot;图片路径&quot;</span>) <br></code></pre></td></tr></table></figure><h3 id="4-事件监听"><a href="#4-事件监听" class="headerlink" title="4. 事件监听"></a>4. 事件监听</h3><p>Pygame 提供了一个 event 模块，这个模块中包含了所有常用到游戏事件。如退出游戏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 循环获取事件，监听事件状态，使用get()获取事件</span><br><span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br><span class="hljs-comment"># 判断事件类型，用户是否点了&quot;X&quot;关闭按钮(pygame.QUIT)</span><br><span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:   <br>pygame.quit()<br></code></pre></td></tr></table></figure><h3 id="5-游戏循环"><a href="#5-游戏循环" class="headerlink" title="5. 游戏循环"></a>5. 游戏循环</h3><p>如果想要达到“循环监听”目的，需要设置一个游戏循环（Game Loop）也称为游戏的主循环。一个最基本的只包含退出操作的主循环如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:    <br>    <span class="hljs-comment"># 循环获取事件，监听事件    </span><br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():        <br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:            <br>        <span class="hljs-comment"># 当用户关闭游戏窗口时执行以下操作            </span><br>            pygame.quit()                   <br>            sys.exit()    <br>    <span class="hljs-comment">#更新并绘制屏幕内容    </span><br>    pygame.display.flip() <br></code></pre></td></tr></table></figure><p>游戏主循环主要承担以下任务：</p><ul><li>处理游戏事件</li><li>更新游戏状态</li><li>把更新后的游戏状态绘制到屏幕上</li></ul><p>游戏画面和游戏操作状态会因为动画效果和玩家的操作而改变，因此需要以循环的方式实时地更新主屏幕（screen）的显示内容。把下列代码放入游戏主循环中即可实现实时更新和绘制屏幕内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#刷新界面显示</span><br>pygame.display.flip() <br></code></pre></td></tr></table></figure><p>除了上述方法外，Pygame 还提供了另一个方法：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">pygame.<span class="hljs-keyword">display</span>.up<span class="hljs-meta">date</span>() <br></code></pre></td></tr></table></figure><p>这两个方法的主要区别是：后者可以根据选定的区域来更新部分内容，而前者则是更新整个待显示的内容。如果后者没有提供区域位置参数时，其作用和 display.flip() 相同。</p><h2 id="display模块"><a href="#display模块" class="headerlink" title="display模块"></a>display模块</h2><h4 id="创建游戏主窗口："><a href="#创建游戏主窗口：" class="headerlink" title="创建游戏主窗口："></a>创建游戏主窗口：</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">screen = pygame.display.<span class="hljs-built_in">set_mode</span>(size=(),flags=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>Display模块中的<code>set_mode()</code>函数负责创建Surface对象，它返回一个Surface对象，同时接收两个参数用于设置窗口大小和样式：</p><ul><li><strong>size：</strong>元组参数，用来设置主窗口的大小</li><li><strong>flags：</strong>功能标志位，表示创建的主窗口样式，比如创建全屏窗口、无边框窗口等</li><li>在主窗口中，我们还可以添加各种小的 Surface 对象，这些对象以矩形的形式存在于主窗口中，它们共同组成了一个游戏程序。通过blit方法将一个 Surface 对象粘贴至主窗口上：</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">screen.blit(source, dest, <span class="hljs-built_in">area</span>=<span class="hljs-built_in">None</span>, special_flags = <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="Surface类：创建图像"><a href="#Surface类：创建图像" class="headerlink" title="Surface类：创建图像"></a>Surface类：创建图像</h2><p>Pygame 针对文本、图像、颜色提供了不同模块来生成它们各自的 Surface 对象。</p><h4 id="Surface-函数"><a href="#Surface-函数" class="headerlink" title="Surface()函数"></a>Surface()函数</h4><p>是Pygame 中专门用来新建图像的，可以创建一个 Surface 对象，语法格式如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Surface=pygame.<span class="hljs-constructor">Surface(<span class="hljs-params">size</span>=(<span class="hljs-params">width</span>,<span class="hljs-params">height</span>)</span>,flags,depth)<br></code></pre></td></tr></table></figure><p>参数函数如下：</p><ul><li>size：表示 Surface 对象的矩形区域大小；</li><li>flags：功能标志位，有两个可选参数值 HWSURFACE 和 SPCALPHA。HWSURFACE 代表将创建的 Surface 对象存放于显存中， SPCALPHA表示让图像的每一个像素都包含一个 alpha 通道</li><li>depth：指定像素的颜色深度，默认为自适应模式，由 Pygame 自动调节。</li></ul><h2 id="image模块"><a href="#image模块" class="headerlink" title="image模块"></a>image模块</h2><p>除了使用 Surface 模块新建图像外，另外一种从外部加载图像的方法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">pygame.<span class="hljs-built_in">image</span>.<span class="hljs-built_in">load</span>(<span class="hljs-string">&quot;图片路径&quot;</span>).<span class="hljs-built_in">convert</span>()  <br></code></pre></td></tr></table></figure><p>该方法返回一个 Surface 对象。convert(）用于转换被加载图片的像素格式，从而提升 Pygame 对图片的处理速度，该操作能够保证图像的像素格式与图片的显示格式是相同的。</p><h2 id="time模块：时间控制"><a href="#time模块：时间控制" class="headerlink" title="time模块：时间控制"></a>time模块：时间控制</h2><p>time 模块主要用于管理时间和帧数率（即 FPS）。</p><p><strong>Point：</strong>Pygame 中时间以毫秒为单位（1秒&#x3D;1000毫秒）。</p><h3 id="1-游戏暂停"><a href="#1-游戏暂停" class="headerlink" title="1) 游戏暂停"></a>1) 游戏暂停</h3><p>常用方法如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>pygame.time.get_ticks()</td><td>以毫秒为单位获取时间</td></tr><tr><td>pygame.time.wait()</td><td>使程序暂停一段时间</td></tr><tr><td>pygame.time.set_timer()</td><td>创建一个定时器，即每隔一段时间，去执行一些动作</td></tr><tr><td>pygame.time.Clock()</td><td>创建一个时钟对象来帮我们确定游戏要以多大的帧数运行</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br>pygame.init()<br>screen = pygame.display.set_mode((<span class="hljs-number">500</span>,<span class="hljs-number">500</span>))<br><span class="hljs-comment"># 获取以毫秒为单位的时间</span><br>t = pygame.time.get_ticks() <span class="hljs-comment">#该时间指的从pygame初始化后开始计算，到调用该函数为止</span><br>t1 =pygame.time.wait(<span class="hljs-number">3000</span>) <span class="hljs-comment">#暂停游戏3000毫秒</span><br><span class="hljs-built_in">print</span>(t1)<br><span class="hljs-comment">#暂停t1时间后，加载图片</span><br>image_surface = pygame.image.load(<span class="hljs-string">&quot;C:/Users/Administrator/Desktop/c-net.png&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            exit()<br>    screen.blit(image_surface,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>    pygame.display.update()<br></code></pre></td></tr></table></figure><h3 id="2-设置游戏FPS"><a href="#2-设置游戏FPS" class="headerlink" title="2) 设置游戏FPS"></a>2) 设置游戏FPS</h3><p>设置游戏的帧数率（FPS）可通过 Clock() 方法来实现：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>pygame.time.Clock.tick()</td><td>更新clock对象</td></tr><tr><td>pygame.time.Clock.get_time()</td><td>获取上一个tick中的时间</td></tr><tr><td>pygame.time.Clock.get_fps()</td><td>计算clock对象的帧率</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建时钟对象（控制游戏的FPS）</span><br>clock = pygame.time.Clock()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment">#通过时钟对象，指定循环频率，每秒循环60次</span><br>    clock.tick(<span class="hljs-number">60</span>)<br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            exit()<br>    screen.blit(image_surface,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>    pygame.display.update()<br></code></pre></td></tr></table></figure><p>注意：FPS（游戏帧率）影响效果只有在动态图时才能显现出来，不过无论静态图还是动态图，它们的使用规则都是一样的。</p><h2 id="Rect类：区域位置"><a href="#Rect类：区域位置" class="headerlink" title="Rect类：区域位置"></a>Rect类：区域位置</h2><p>Rect（rectangle）指的是矩形，使用 Rect() 方法来创建一个指定位置，大小的矩形区域如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">rect =pygame.<span class="hljs-constructor">Rect(<span class="hljs-params">left</span>,<span class="hljs-params">top</span>,<span class="hljs-params">width</span>,<span class="hljs-params">height</span>)</span> <br></code></pre></td></tr></table></figure><p>Rect 表示的区域必须位于一个 Surface 对象之上，比如游戏的主窗口。</p><p><strong>Point</strong>：在 Pygame 中以游戏主窗口的左上角为坐标原点。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">image_surface = pygame.image.load(<span class="hljs-string">&quot;C:/Users/Administrator/Desktop/c-net.png&quot;</span>)<br><br>rect1 = pygame.Rect(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)<br><span class="hljs-comment"># 在原图的基础上创建一个新的子图（surface对象）</span><br>image_child= image_surface.subsurface(rect1)<br><br>rect2 = image_child.get_rect()<br><span class="hljs-comment">#输出的矩形大小为 100*100</span><br><span class="hljs-built_in">print</span>(rect2)<br><br>screen.blit(image_child,rect1)<br></code></pre></td></tr></table></figure><p>可通过属性对来设置更改矩形区域的大小：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">rect1.left</span> = <span class="hljs-number">30</span> <br><span class="hljs-attr">rect1.center</span> = (<span class="hljs-number">70</span>,<span class="hljs-number">70</span>)<br></code></pre></td></tr></table></figure><p>除了通过 Rect 对象来构造一个矩形区域之外，还可以使用<code>rect</code>属性来构建一个矩形区域。在 Pygame 中有许多函数都提供了<code>rect</code>属性，比如有下列函数：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">surface</span>.fill((<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>),rect=(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>))<br></code></pre></td></tr></table></figure><p>上述代码会在 surface 对象的区域内选定一个 rect 区域，并将该区域填充为蓝色（RGB(0,0,255)）。</p><h2 id="event模块"><a href="#event模块" class="headerlink" title="event模块"></a>event模块</h2><p>事件（Event）是构建整个游戏程序的核心，比如鼠标点击、键盘敲击、游戏窗口移动、调整窗口大小、触发特定的情节、退出游戏等。<strong>Pygame 定义了一个专门用来处理事件的结构，即事件队列</strong>。该结构遵循队列“先进先出”的基本原则，通过事件队列，我们可以有序的、逐一的处理用户的操作。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment">#等待事件发生</span><br>    event = pygame.event.wait()<br>    <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>        exit()<br>    <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.MOUSEBUTTONDOWN:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;鼠标按下&#x27;</span>,event.pos)<br>    <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.MOUSEBUTTONUP:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;鼠标弹起&#x27;</span>)<br>    <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.MOUSEMOTION:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;鼠标移动&#x27;</span>)<br>        <span class="hljs-comment"># 键盘事件</span><br>    <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> ==pygame.KEYDOWN:<br>        <span class="hljs-comment"># 打印按键的英文字符</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键盘按下&#x27;</span>,<span class="hljs-built_in">chr</span>(event.key))<br>    <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;键盘弹起&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="处理键盘事件"><a href="#处理键盘事件" class="headerlink" title="处理键盘事件"></a>处理键盘事件</h3><p>键盘事件提供了一个 key 属性，通过该属性可以获取键盘的按键。Pygame 将键盘上的字母键、数字键、组合键等按键以常量的方式进行了定义。示例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">while</span> True:<br>    site = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.type == pygame.QUIT:<br>            sys.<span class="hljs-keyword">exit</span>()<br>        <span class="hljs-comment"># 图像移动 KEYDOWN 键盘按下事件</span><br>        <span class="hljs-comment"># 通过 key 属性对应按键</span><br>        <span class="hljs-keyword">if</span> event.type == pygame.KEYDOWN:<br>            <span class="hljs-keyword">if</span> event.key == pygame.K_UP:<br>                site[<span class="hljs-number">1</span>] -= <span class="hljs-number">8</span><br>            <span class="hljs-keyword">if</span> event.key == pygame.K_DOWN:<br>                site[<span class="hljs-number">1</span>] += <span class="hljs-number">8</span><br>            <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT:<br>                site[<span class="hljs-number">0</span>] -= <span class="hljs-number">8</span><br>            <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>                site[<span class="hljs-number">0</span>] += <span class="hljs-number">8</span><br>    <span class="hljs-comment"># 移动图像</span><br>    position = position.move(site)<br>    <span class="hljs-comment"># 填充背景</span><br>    screen.fill(bg)<br>    <span class="hljs-comment"># 放置图片</span><br>    screen.blit(img, position)<br>    <span class="hljs-comment"># 更新显示界面</span><br>    pygame.display.flip()<br></code></pre></td></tr></table></figure><h3 id="处理鼠标事件"><a href="#处理鼠标事件" class="headerlink" title="处理鼠标事件"></a>处理鼠标事件</h3><p>示例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">while</span> True:<br>    <span class="hljs-comment">#等待事件发生</span><br>    event = pygame.event.wait()<br>    <span class="hljs-keyword">if</span> event.type == pygame.QUIT:<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;成功退出&quot;</span>)<br>    <span class="hljs-keyword">if</span> event.type == pygame.MOUSEBUTTONDOWN:<br>        <span class="hljs-comment"># pos 获取鼠标当前位置</span><br>        print(<span class="hljs-string">&#x27;鼠标按下&#x27;</span>,event.pos)<br>        mx,my = event.pos<br>        <span class="hljs-comment"># 调用 pygame.draw 模块画圆</span><br>        pygame.draw.circle(screen,(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>),(mx,my),<span class="hljs-number">50</span>)<br>        <span class="hljs-comment"># 处理完，更新显示</span><br>        pygame.display.update()<br>    <span class="hljs-keyword">if</span> event.type == pygame.MOUSEBUTTONUP:<br>        print(<span class="hljs-string">&#x27;鼠标弹起&#x27;</span>)<br>        pass<br>    <span class="hljs-keyword">if</span> event.type == pygame.MOUSEMOTION:<br>        print(<span class="hljs-string">&#x27;鼠标移动&#x27;</span>)<br>        mx, my = event.pos<br>        <span class="hljs-comment"># 随机生成 RGB 颜色值</span><br>        r = randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)<br>        g = randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)<br>        b = randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>)<br>        pygame.draw.circle(screen, (r,g,b,),(mx, my), <span class="hljs-number">50</span>)<br>        <span class="hljs-comment"># 处理完，更新显示</span><br>        pygame.display.update()<br></code></pre></td></tr></table></figure><h2 id="font模块：文本和字体"><a href="#font模块：文本和字体" class="headerlink" title="font模块：文本和字体"></a>font模块：文本和字体</h2><p><code>pygame.font</code>模块常用方法如下：</p><p>Font 模块提供了两种创建Font类对象的方法，分别是：</p><ul><li>SysFont（从系统中加载字体文件创建字体对象）</li><li>Font（通过文件路径创建字体对象）</li></ul><h4 id="1-font-SysFont"><a href="#1-font-SysFont" class="headerlink" title="1) font.SysFont()"></a>1) font.SysFont()</h4><p>直接从系统中加载字体使用如下方法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pygame.font.SysFont(name, size, <span class="hljs-attribute">bold</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">italic</span>=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><ul><li><p>name：列表参数值，表示要从系统中加载的字体名称，它会按照列表中的元素顺序依次搜索，如果系统中没有列表中的字体，将使用 Pygame 默认的字体。</p></li><li><p>size：表示字体的大小；</p></li><li><p>bold：字体是否加粗；</p></li><li><p>italic：字体是否为斜体。</p></li></ul><h4 id="2-font-Font"><a href="#2-font-Font" class="headerlink" title="2) font.Font()"></a>2) font.Font()</h4><p>Font()可从外部加载字体文件来绘制文本：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">my_font = pygame.font.<span class="hljs-constructor">Font(<span class="hljs-params">filename</span>, <span class="hljs-params">size</span>)</span> <br></code></pre></td></tr></table></figure><ul><li>filename：字符串格式，表示字体文件的所在路径；</li><li>size：设置字体的大小。</li></ul><h2 id="sprite模块：精灵和碰撞检测"><a href="#sprite模块：精灵和碰撞检测" class="headerlink" title="sprite模块：精灵和碰撞检测"></a>sprite模块：精灵和碰撞检测</h2><p>在一个游戏程序中，精灵（ Sprite）本质指的是一张张小尺寸的图片，比如游戏中的各种道具、人物、场景装饰等，它们都可以看做成一张张小的“精灵”图。除此之外，人物的移动也可以看做是一系列小精灵图构成的序列（按帧组成的序列）。</p><p>如果将逐帧分解后的动作，按照一定的频率播放，那么就形成了动画精灵。</p><p>精灵有个特点就是允许精灵之间进行交互，也称之为碰撞，而碰撞检测，指的就是检测两个精灵之间是否发生了碰撞。比如在贪吃蛇游戏中蛇的头部是否与食物发生了碰撞，或者飞机大战游戏中子弹是否击中了外星人等等。当检测到碰撞发生后，接下来会触发某些事件，比如子弹击中外星人，外星人就会消失，玩家的得分也会随之增加，并且在游戏屏幕上又会出现一个外星人。</p><p>Pygame 专门提供了一个处理精灵的模块，也就是 sprite模块。<strong>通常使用该模块的基类 Sprite 来创建一个子类，从而达到处理精灵的目的</strong> ，该子类提供了操作精灵的常用属性和方法。</p><p>当游戏中有大量的精灵时，操作它们将变得复杂，此时通过构建精灵容器（group 类）也就是精灵组来统一管理这些精灵。构建方法如下：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 创建精灵组</span><br><span class="hljs-keyword">group</span> <span class="hljs-title">= pygame</span>.sprite.Group()<br><span class="hljs-comment"># 向组内添加一个精灵</span><br>group.add(sprite_one)<br></code></pre></td></tr></table></figure><p>于此同时<code>pygame.sprite</code>模块也提供了多种检测精灵是否碰撞的方法。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Snake</span>(pygame.sprite.Sprite):<br>    <span class="hljs-comment">#定义构造函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,filename,location</span>):<br>        <span class="hljs-comment"># 调父类来初始化子类</span><br>        pygame.sprite.Sprite.__init__(self)<br>        <span class="hljs-comment"># 加载图片</span><br>        self.image = pygame.image.load(filename)<br>        <span class="hljs-comment"># 获取图片rect区域</span><br>        self.rect = self.image.get_rect()<br>        <span class="hljs-comment"># 设置位置</span><br>        self.rect.topleft=location<br><span class="hljs-comment"># 初始化pygame</span><br>pygame.init()<br>screen = pygame.display.set_mode((<span class="hljs-number">500</span>,<span class="hljs-number">400</span>))<br><br><span class="hljs-comment"># 填充为白色屏幕</span><br>screen.fill((<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>filename =<span class="hljs-string">&quot;C:/Users/Administrator/Desktop/snake.png&quot;</span><br>location =(<span class="hljs-number">100</span>,<span class="hljs-number">150</span>)<br>snake1 = Snake(filename,location)<br><span class="hljs-comment"># 碰撞检测,必须有两个精灵，因此再创建一个精灵，并使用location来控制第二个精灵的位置</span><br>location_2 = (<span class="hljs-number">100</span>,<span class="hljs-number">80</span>)<br>snake2 = Snake(<span class="hljs-string">&#x27;C:/Users/Administrator/Desktop/logo.png&#x27;</span>,location_2)<br><span class="hljs-comment"># 调用 collide_rect()进行矩形区域检测，返回一个布尔值，碰撞返回True，否则返回False</span><br>crash_result = pygame.sprite.collide_rect(snake1,snake2)<br><span class="hljs-keyword">if</span> crash_result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;精灵碰撞了!&quot;</span>)<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;精灵没碰撞&#x27;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            pygame.quit()<br>            exit()<br>    <span class="hljs-comment"># 绘制精灵到屏幕上</span><br>    screen.blit(snake1.image,snake1.rect)<br>    screen.blit(snake2.image,snake2.rect)<br>    <span class="hljs-comment"># 刷新显示屏幕</span><br>    pygame.display.update()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Note for Python 01</title>
    <link href="/2022/02/10/PythonNote/"/>
    <url>/2022/02/10/PythonNote/</url>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h3 id="动态语言-amp-静态语言："><a href="#动态语言-amp-静态语言：" class="headerlink" title="动态语言 &amp; 静态语言："></a>动态语言 &amp; 静态语言：</h3><ul><li><p><strong>动态语言：</strong>变量本身类型不固定。使用变量无需声明，但使用前必须赋值，赋值后变量才被创建。</p><p><strong>e.g. Python、Ruby、JavaScript</strong></p></li><li><p><strong>静态语言：</strong>变量类型固定。在定义变量时必须指定变量类型，赋值时变量与对象的类型必须相匹配or进行转化。</p><p><strong>e.g. Java、C、C++</strong></p></li></ul><blockquote><p>动态语言和静态语言很大的不同在于：函数和类的定义不是编译时定义的，而是运行时动态创建的。</p></blockquote><h3 id="引用赋值："><a href="#引用赋值：" class="headerlink" title="引用赋值："></a>引用赋值：</h3><p>像Python、JS这类动态语言，基本上都是使用引用赋值。在引用赋值中，变量名和真实值分开保存。变量名保存的是真实值的一个指针，对变量赋值时，也是将这个指针赋给新变量，原来的“引用”则断开了。</p><h3 id="Python中的不可变类型-amp-可变类型："><a href="#Python中的不可变类型-amp-可变类型：" class="headerlink" title="Python中的不可变类型 &amp; 可变类型："></a>Python中的不可变类型 &amp; 可变类型：</h3><ul><li><p><strong>不可变类型： Number、String、Tuple</strong></p><p>当变量为不可变类型时，无法在内存中直接修改这个变量（如：100、’hello‘）。如果尝试对不可变类型进行修改，就会断开原始的引用，重新指向新的对象。</p></li><li><p><strong>可变类型：List、Dictionary、Set</strong></p><p>可以在内存中进行修改，修改可变类型的值不会断开原始引用。</p></li></ul><h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><p>主动发起TCP链接，接收服务器返回数据，实现一次完整的网络通信。</p><p>以获取新浪首页HTML文件为例：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#tcp基本连接新浪首页获取并打印http头</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> ssl<br><br>s = ssl.wrap_socket(socket.socket())<br><br><span class="hljs-comment">#建立连接</span><br>s.connect((<span class="hljs-string">&#x27;www.sina.com.cn&#x27;</span>, <span class="hljs-number">443</span>))<br><br>s.send(<span class="hljs-string">b&quot;GET / HTTP/1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n&quot;</span>)<br><br><span class="hljs-comment">#接受数据</span><br>buf = []<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    d = s.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">if</span> d:<br>        buf.append(d)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>data = <span class="hljs-string">b&quot;&quot;</span>.join(buf)<br><br><span class="hljs-comment">#关闭tcp连接</span><br>s.close()<br><br>data = data.split(<span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#打印请求头把流数据进行解码</span><br><span class="hljs-built_in">print</span>(data[<span class="hljs-number">0</span>].decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-comment">#写进文件html，存入本地文件夹</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:/SE/CODE/Python/sina.html&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iFleaBooks</title>
    <link href="/2022/02/06/iFleaBooks/"/>
    <url>/2022/02/06/iFleaBooks/</url>
    
    <content type="html"><![CDATA[<h1 id="iFleaBooks"><a href="#iFleaBooks" class="headerlink" title="iFleaBooks"></a>iFleaBooks</h1><p>Linux环境下的二手书交易系统</p><p>是一个C++练手项目，实现了较完整的交易系统前后台功能，包括用户注册、登录、浏览商品、发布商品、修改信息，管理员进行后台数据管理，本地数据载入与更新等，并基于Linux命令行进行交互。</p><p><strong>GitHub链接：</strong><a href="https://github.com/yinn-x/iFleaBooks">https://github.com/yinn-x/iFleaBooks</a></p><hr><h3 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a><strong>开发环境：</strong></h3><p>Ubuntu &amp; VS Code</p><h3 id="实现功能："><a href="#实现功能：" class="headerlink" title="实现功能："></a><strong>实现功能：</strong></h3><p><strong>User：</strong></p><ul><li>注册 &amp; 登录 &amp; 注销；</li><li>浏览书库 &#x2F; 搜索书籍 &amp; 查看书的详细信息；</li><li>购买二手书 &amp; 查看已购订单；</li><li>发布二手书 &amp; 修改详细信息；</li><li>下架自己的发布 &amp; 查看卖出订单；</li><li>个人信息管理 &amp; 钱包充值。</li></ul><p><strong>Admin：</strong></p><ul><li>查看 &#x2F; 检索所有书籍 &amp; 下架书籍；</li><li>查看和管理所有订单；</li><li>查看和管理所有用户信息。</li></ul><h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果</strong>：</h3><p>登录界面 &amp; 注册 ：</p>  <img src="/img/iFleaBooks/11.png" style="zoom:50%;" /><p>​          </p><p>浏览界面：</p> <img src="/img/iFleaBooks/22.png" style="zoom:50%;" /><p>​           </p><p>买书界面：</p>  <img src="/img/iFleaBooks/2.png" style="zoom:50%;" /><p>​       </p><p>钱包充值：</p>  <img src="/img/iFleaBooks/3.png" style="zoom:50%;" /><p>​     </p><p>管理员界面：</p><img src="/img/iFleaBooks/4.png" style="zoom:50%;" /><p>​    </p><p>还有一堆界面懒得截了（雾</p>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Note of C++ Primer</title>
    <link href="/2022/02/02/Note%20of%20C++%20Primer/"/>
    <url>/2022/02/02/Note%20of%20C++%20Primer/</url>
    
    <content type="html"><![CDATA[<h1 id="1-从-C-到-C"><a href="#1-从-C-到-C" class="headerlink" title="1. 从 C 到 C++"></a>1. 从 C 到 C++</h1><p>一些 C++ 的新特性：</p><p><strong>多态：</strong></p><ul><li><p>静态多态：</p><p>（1）重载（函数重载 &amp; 运算符重载） </p><p>（2）泛型（函数模板 &amp; 类模板）</p></li><li><p>动态多态：虚函数</p></li></ul><p><strong>类：</strong></p><ul><li><p>继承（基类 &amp; 子类）</p></li><li><p>封装 （类访问修饰符 &amp; 友元）</p></li><li><p>其他细节：（1）类的默认函数</p><p>​                   （2）运算符重载</p><p>​                   （3）this 指针</p></li></ul><p><strong>其他：</strong></p><ul><li><p>引用变量</p></li><li><p>范围 for 语句</p></li><li><p>迭代器</p></li><li><p>内联函数</p></li><li><p>new &amp; delete</p></li><li><p>流式文件读写</p></li><li><p>函数的默认参数</p></li></ul><h2 id="2-多态"><a href="#2-多态" class="headerlink" title="2. 多态"></a>2. 多态</h2><h4 id="（1）泛型编程"><a href="#（1）泛型编程" class="headerlink" title="（1）泛型编程"></a>（1）泛型编程</h4><p>泛型编程在 C++ 中主要通过模板函数和模板类实现。</p><p>函数模板的性质：</p><ol><li>函数模板不是真正的函数，只是编译时生成具体函数的一个”模子”。</li><li>函数模板不是编译一份满足多重需要，而是为每一种替换它的函数编译生成一份新函数。</li></ol><p>函数模板的实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span>&#123;<br>T t = a;<br>a = b, b = t;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>template用于声明开始泛型编程，typyname用于声明泛指类型。</p></li><li><p>自动类型推导调用:</p><p><code> Swap(a, b);</code> </p><p>该调用属于隐式实例化。</p></li><li><p>具体类型显式调用：</p><p><code>Swap&lt;int&gt;(a, b);</code></p><p>该调用属于显式实例化。</p></li></ul><p>显式具体化：</p><p>一种模板定义，实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;&gt; <span class="hljs-type">void</span> <span class="hljs-built_in">Swap</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-type">int</span>&amp;, <span class="hljs-type">int</span>&amp;)&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>或：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;, <span class="hljs-type">int</span>&amp;)</span></span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>意为“当实参为两个int类型时，不要使用Swap()模板来生成函数定义，而应使用专门为int类型显式地定义地具体函数”。</p><h4 id="（2）动态多态"><a href="#（2）动态多态" class="headerlink" title="（2）动态多态"></a>（2）动态多态</h4><p>动态多态主要通过继承重写基类的虚函数实现，在程序运行时根据基类的指针（或引用）指向的对象来确定自己具体调用哪一个类的虚函数。</p><h2 id="3-类的4个默认函数"><a href="#3-类的4个默认函数" class="headerlink" title="3. 类的4个默认函数"></a>3. 类的4个默认函数</h2><p>类的4个默认函数分别为构造函数、析构函数、拷贝函数和赋值函数。通常来讲，1个类包含多个构造函数（由1个或多个普通构造函数与1个拷贝构造函数组成）、1个赋值函数和1个析构函数。若不编写上述函数，C++编译器会自动为类产生4个缺省的函数。然而，使用默认的构造函数与析构函数，相当于放弃了自主“初始化”与“清除”机会。同时，默认的拷贝构造函数、赋值函数采用“位拷贝”而非“值拷贝”，类中含指针变量时将出错。</p><h4 id="（1）构造函数"><a href="#（1）构造函数" class="headerlink" title="（1）构造函数"></a>（1）构造函数</h4><p>构造函数是与类同名、无返回值的特殊成员函数，提供对成员变量初始化的方法。程序创建时将自动调用构造函数。</p><ul><li><p><strong>默认的构造函数：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> grade;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>() &#123;<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>默认构造函数无参，仅负责创建对象而不进行赋值操作。</p></li><li><p><strong>无参带赋值操作的构造函数：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> grade;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>() &#123;<br>name = <span class="hljs-string">&#x27;xiaoming&#x27;</span>;<br>        garde = <span class="hljs-number">90</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>该函数将覆盖默认构造函数，它不仅创建对象还负责成员初始化。</p></li><li><p><strong>带参的带赋值操作的构造函数：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> grade;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>(string n, <span class="hljs-type">int</span> g) &#123;<br>name = n;<br>        garde = g;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>该构造函数也将覆盖默认的构造函数。</p><p><strong>注意：</strong>一旦类中只包含带参的构造函数而不包含不带参的构造函数时，将无法创建不带参数的对象，程序将报错。</p><p><strong>解决办法：</strong>手动写一个默认构造函数，或给带参函数赋默认参数。</p></li></ul><p><strong>也可通过初始化表进行初始化：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> grade;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>(string n, <span class="hljs-type">int</span> g): <span class="hljs-built_in">name</span>(x), <span class="hljs-built_in">grade</span>(g) &#123;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）拷贝构造函数-amp-赋值函数"><a href="#（2）拷贝构造函数-amp-赋值函数" class="headerlink" title="（2）拷贝构造函数 &amp; 赋值函数"></a>（2）拷贝构造函数 &amp; 赋值函数</h4><p>默认的拷贝构造函数：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Student(<span class="hljs-params">const</span> Student&amp; <span class="hljs-params">stu</span>)</span><br></code></pre></td></tr></table></figure><p>默认的赋值函数：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Student<span class="hljs-meta">&amp; operater=(const Student&amp; stu)</span><br></code></pre></td></tr></table></figure><p>拷贝构造函数是在创建对象时调用，而赋值函数只能被已存在的对象调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>)</span></span>;<br><span class="hljs-function">string <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-string">&quot;world&quot;</span>)</span></span>;<br>string c = a; <span class="hljs-comment">//调用了拷贝构造函数，也可写成stirng c(a);</span><br>c = b; <span class="hljs-comment">//调用了赋值函数 </span><br></code></pre></td></tr></table></figure><h4 id="（3）析构函数"><a href="#（3）析构函数" class="headerlink" title="（3）析构函数"></a>（3）析构函数</h4><p>也是无参无返回类型的特殊成员函数，但它不能随意调用，没有重载，只有在类对象的生命期结束时，由系统自动调用，用来在系统释放对象前做一些清理工作。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>Note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>About</title>
    <link href="/2022/02/01/About/"/>
    <url>/2022/02/01/About/</url>
    
    <content type="html"><![CDATA[<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p>这里是YiNN的个人博客！</p><p>本人目前HUST SE大一在读 在写程序这块还是个萌新</p><p>爱好是画点小画，虽然好像很久没画了</p><p>这是我的<a href="https://heeeeeeeeeha.lofter.com/">lofter账号</a></p><p>然后平时大概是比较喜欢看电影刷剧啥的</p><p>这是我的<a href="https://www.douban.com/people/185275812/">豆瓣</a></p><p>(没写完待续)</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>My First Blog</title>
    <link href="/2022/01/28/MyFirstBlog/"/>
    <url>/2022/01/28/MyFirstBlog/</url>
    
    <content type="html"><![CDATA[<p>深夜被一些诡异的报错反复折磨，气到重装Ubuntu。漫长的安装等待中想到，要不边等边把个人博客给建了吧，于是一通操作两天后有了现在的这篇blog。</p><p>鉴于本人的菜鸡水平应该也没办法分享出什么技术，这个博客大概就是给自己的各种笔记啥的找个归属地。</p><p>所以本人的寒假又多了点乐子：把博客建得像模像样一点（误</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
