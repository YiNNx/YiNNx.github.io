<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nginx 静态代理与反向代理</title>
    <link href="/2022/04/13/10-nginx/"/>
    <url>/2022/04/13/10-nginx/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx-静态代理与反向代理"><a href="#Nginx-静态代理与反向代理" class="headerlink" title="Nginx 静态代理与反向代理"></a>Nginx 静态代理与反向代理</h1><blockquote><p>环境 Ubuntu 18.04</p></blockquote><h3 id="配置静态页面"><a href="#配置静态页面" class="headerlink" title="配置静态页面"></a>配置静态页面</h3><p>把博客页面用nginx配置到<code>&lt;ip&gt;:8080</code>上！</p><p>安装nginx &amp; 开启服务:</p><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install nginx<span class="hljs-built_in"></span><br><span class="hljs-built_in">service </span>nginx start<br></code></pre></td></tr></table></figure><p>此时在浏览器输入ip地址，出现以下页面就代表nginx成功启动</p><p><img src="/img/nginx/image-20220413112450812.png"></p><blockquote><p>Ubuntu 查看本机IP地址命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install net-tools<br>ifconfig<br></code></pre></td></tr></table></figure><p>第三行inet字段即本机IP</p><p><img src="/img/nginx/image-20220412212908553.png"></p></blockquote><p>修改配置文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>nginx/nginx.conf<br></code></pre></td></tr></table></figure><p>在http块中新建一个server块</p><p>（http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。而每个 server 也可以同时包含多个 locaton 块。）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span> root;<br><span class="hljs-attribute">worker_processes</span> auto;<br><span class="hljs-attribute">pid</span> /run/nginx.pid;<br><span class="hljs-attribute">include</span> /etc/nginx/modules-enabled/<span class="hljs-regexp">*.conf</span>;<br><br><span class="hljs-section">events</span> &#123;<br>     <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">768</span>;<br>     <span class="hljs-comment"># multi_accept on;</span><br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br><br>     <span class="hljs-comment">##</span><br>     <span class="hljs-comment"># Basic Settings</span><br>     <span class="hljs-comment">##</span><br><br>     <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br>     <span class="hljs-attribute">tcp_nopush</span> <span class="hljs-literal">on</span>;<br>     <span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>;<br>     <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;<br>     <span class="hljs-attribute">types_hash_max_size</span> <span class="hljs-number">2048</span>;<br>     <span class="hljs-comment"># server_tokens off;</span><br><br>     <span class="hljs-comment"># server_names_hash_bucket_size 64;</span><br>     <span class="hljs-comment"># server_name_in_redirect off;</span><br><br>     <span class="hljs-attribute">include</span> /etc/nginx/mime.types;<br>     <span class="hljs-attribute">default_type</span> application/octet-stream;<br><br>     <span class="hljs-comment">##</span><br>     <span class="hljs-comment"># SSL Settings</span><br>     <span class="hljs-comment">##</span><br><br>     <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>; <span class="hljs-comment"># Dropping SSLv3, ref: POODLE</span><br>     <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br><br>     <span class="hljs-comment">##</span><br>     <span class="hljs-comment"># Logging Settings</span><br>     <span class="hljs-comment">##</span><br><br>     <span class="hljs-attribute">access_log</span> /var/log/nginx/access.log;<br>     <span class="hljs-attribute">error_log</span> /var/log/nginx/<span class="hljs-literal">error</span>.log;<br><br>     <span class="hljs-comment">##</span><br>     <span class="hljs-comment"># Gzip Settings</span><br>     <span class="hljs-comment">##</span><br><br>     <span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<br><br>     <span class="hljs-comment"># gzip_vary on;</span><br>     <span class="hljs-comment"># gzip_proxied any;</span><br>     <span class="hljs-comment"># gzip_comp_level 6;</span><br>     <span class="hljs-comment"># gzip_buffers 16 8k;</span><br>     <span class="hljs-comment"># gzip_http_version 1.1;</span><br>     <span class="hljs-comment"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><br>     <span class="hljs-comment">##</span><br>     <span class="hljs-comment"># Virtual Host Configs</span><br>     <span class="hljs-comment">##</span><br><br>     <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br>     <span class="hljs-attribute">include</span> /etc/nginx/sites-enabled/*;<br><br> <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>  <span class="hljs-number">8080</span>; <span class="hljs-comment">#监听的端口号</span><br>        <span class="hljs-attribute">server_name</span> localhost;<br>    <span class="hljs-attribute">root</span> /home/yin/public/; <span class="hljs-comment">#本地静态文件根目录</span><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;<br>        &#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">#mail &#123;</span><br><span class="hljs-comment">## See sample authentication script at:</span><br><span class="hljs-comment">## http://t.cn/A66mK6g7</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">## auth_http localhost/auth.php;</span><br><span class="hljs-comment">## pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span><br><span class="hljs-comment">## imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># server &#123;</span><br><span class="hljs-comment">#  listen     localhost:110;</span><br><span class="hljs-comment">#  protocol   pop3;</span><br><span class="hljs-comment">#  proxy      on;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># server &#123;</span><br><span class="hljs-comment">#  listen     localhost:143;</span><br><span class="hljs-comment">#  protocol   imap;</span><br><span class="hljs-comment">#  proxy      on;</span><br><span class="hljs-comment"># &#125;</span><br><span class="hljs-comment">#&#125;</span><br></code></pre></td></tr></table></figure><p>然后把blog源目录的public文件内容放到<code>/home/yin/public/</code>内</p><p>重载配置文件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service nginx reload</span><br></code></pre></td></tr></table></figure><p>关一下防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ufw status<br>sudo ufw <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><p>也可以选择单独开启相应端口的外部访问</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ufw <span class="hljs-literal">allow</span> <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p>此时输入<code>&lt;ip&gt;:8080</code>就能访问blog内容了！</p><p><img src="/img/nginx/image-20220413111617219.png"></p><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>依然是在http块的server块中配置proxy_pass代理转发</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>           <span class="hljs-attribute">listen</span>  <span class="hljs-number">80</span>;  <span class="hljs-comment">#端口号</span><br>           <span class="hljs-attribute">server_name</span> <span class="hljs-number">10.0.2.15</span>;<br>           <span class="hljs-section">location</span> /hust/ &#123;<br>               <span class="hljs-attribute">proxy_pass</span> https://www.hust.edu.cn/; <span class="hljs-comment">#反向代理目标网址</span><br>           &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重载配置文件后访问<code>&lt;ip&gt;/hust/</code>，成功！</p><p><img src="/img/nginx/image-20220413112711402.png"></p><p>访问 <code>&lt;ip&gt;/hust/xxgk/xxjj.htm</code> 即是访问 <a href="https://www.hust.edu.cn/xxgk/xxjj.htm">https://www.hust.edu.cn/xxgk/xxjj.htm</a></p><p><img src="/img/nginx/image-20220413112807260.png"></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>美食！</title>
    <link href="/2022/03/31/9-yummy/"/>
    <url>/2022/03/31/9-yummy/</url>
    
    <content type="html"><![CDATA[<h1 id="大概是学校好吃的记录"><a href="#大概是学校好吃的记录" class="headerlink" title="大概是学校好吃的记录"></a>大概是学校好吃的记录</h1><ul><li><h3 id="西一的脆皮鸡腿饭"><a href="#西一的脆皮鸡腿饭" class="headerlink" title="西一的脆皮鸡腿饭"></a>西一的脆皮鸡腿饭</h3></li></ul><blockquote><img src="/img/yummy/IMG_3362.JPG" style="zoom:33%;" /><p>脆皮鸡腿味道非常之赞！</p><p>K记的吮指原味鸡都不得不甘拜下风的程度</p></blockquote><ul><li><h3 id="集锦园的烤肉饭"><a href="#集锦园的烤肉饭" class="headerlink" title="集锦园的烤肉饭"></a>集锦园的烤肉饭</h3></li></ul><blockquote><img src="/img/yummy/IMG_5127.JPG" style="zoom:33%;" /><p>来自47的倾情推荐</p><p>拌着吃真的很香</p><p>另外右上角的小炸鸡腿只要三块五！</p></blockquote><ul><li><h3 id="东小门的螺蛳粉店"><a href="#东小门的螺蛳粉店" class="headerlink" title="东小门的螺蛳粉店"></a>东小门的螺蛳粉店</h3></li></ul><blockquote><img src="/img/yummy/IMG_7145.JPG" style="zoom:33%;" /><img src="/img/yummy/IMG_4698.JPG" style="zoom:33%;" /><p>螺蛳粉和拌桂林米粉都非常好吃ww</p></blockquote><ul><li><h3 id="秀玉"><a href="#秀玉" class="headerlink" title="秀玉"></a>秀玉</h3></li></ul><blockquote><img src="/img/yummy/IMG_6716.JPG" style="zoom:33%;" /><p>秀玉的披萨非常之好吃！可惜忘拍照了</p></blockquote><ul><li><h3 id="韵酒的鸡蛋砂锅面"><a href="#韵酒的鸡蛋砂锅面" class="headerlink" title="韵酒的鸡蛋砂锅面"></a>韵酒的鸡蛋砂锅面</h3></li></ul><blockquote><img src="/img/yummy/IMG_4828.JPG" style="zoom:33%;" /><p>大概是韵酒唯一好吃的窗口(误)</p></blockquote><ul><li><h3 id="东一的麻辣香锅"><a href="#东一的麻辣香锅" class="headerlink" title="东一的麻辣香锅"></a>东一的麻辣香锅</h3></li></ul><blockquote><img src="/img/yummy/IMG_5102.JPG" style="zoom:33%;" /><p>每到饭点排队巨长无比</p><p>味道吊打学一楼和东三的麻辣香锅</p></blockquote><ul><li><h3 id="集锦园的排骨面"><a href="#集锦园的排骨面" class="headerlink" title="集锦园的排骨面"></a>集锦园的排骨面</h3></li></ul><blockquote><img src="/img/yummy/IMG_5311.JPG" style="zoom:33%;" /><p>赞！只不过不辣</p></blockquote><ul><li><h3 id="光谷阿卡AK-Lab韩国料理"><a href="#光谷阿卡AK-Lab韩国料理" class="headerlink" title="光谷阿卡AK.Lab韩国料理"></a>光谷阿卡AK.Lab韩国料理</h3></li></ul><blockquote><img src="/img/yummy/IMG_6288.JPG" /><p>部队锅很可</p></blockquote><ul><li><h3 id="集锦园拌馄饨"><a href="#集锦园拌馄饨" class="headerlink" title="集锦园拌馄饨"></a>集锦园拌馄饨</h3></li></ul><blockquote><img src="/img/yummy/IMG_6419.JPG" style="zoom:33%;" /><p>让我一个不爱吃馄饨的人都惊叹好吃的馄饨</p></blockquote><ul><li><h3 id="东教工麻辣烫"><a href="#东教工麻辣烫" class="headerlink" title="东教工麻辣烫"></a>东教工麻辣烫</h3></li></ul><blockquote><img src="/img/yummy/IMG_6629.JPG" style="zoom:33%;" /><p>比杨国福味道清淡很多</p><p>就是很好吃又没什么负担的麻辣烫</p></blockquote><ul><li><h3 id="绝望坡上的一捧饭团"><a href="#绝望坡上的一捧饭团" class="headerlink" title="绝望坡上的一捧饭团"></a>绝望坡上的一捧饭团</h3></li></ul><blockquote><img src="/img/yummy/IMG_7006.JPG" style="zoom:33%;" /><p>爆浆芝士饭团芝士真的很足</p><p>记得和店员说对半切开</p><p>更方便吃噢</p></blockquote><ul><li><h3 id="学一一楼的云南米线"><a href="#学一一楼的云南米线" class="headerlink" title="学一一楼的云南米线"></a>学一一楼的云南米线</h3></li></ul><blockquote><img src="/img/yummy/IMG_7094.JPG" style="zoom:33%;" /><p>图上是牛肉和豆豉的豪华双拼版，额外加醋加辣谁吃谁知道</p></blockquote><ul><li><h3 id="喻园的香辣五花肉铁板饭"><a href="#喻园的香辣五花肉铁板饭" class="headerlink" title="喻园的香辣五花肉铁板饭"></a>喻园的香辣五花肉铁板饭</h3></li></ul><blockquote><img src="/img/yummy/IMG_7117.JPG" style="zoom:33%;" /><p>同样是饭点排队巨长的窗口</p><p>我最爱的口味是香辣五花肉！</p><p>不过这个窗口的铁板意面一般般我感觉</p></blockquote><ul><li><h3 id="喻园的川香拌面"><a href="#喻园的川香拌面" class="headerlink" title="喻园的川香拌面"></a>喻园的川香拌面</h3></li></ul><blockquote><img src="/img/yummy/IMG_3698.JPG" style="zoom:33%;" /><p>好吃！很川香！</p></blockquote><ul><li><h3 id="吉野家"><a href="#吉野家" class="headerlink" title="吉野家"></a>吉野家</h3></li></ul><blockquote><img src="/img/yummy/IMG_5243.JPG" style="zoom:33%;" /><p>大众点评的券非常之划算了</p></blockquote><ul><li><h3 id="东园三楼的自助"><a href="#东园三楼的自助" class="headerlink" title="东园三楼的自助"></a>东园三楼的自助</h3></li></ul><blockquote><img src="/img/yummy/IMG_4462.JPG" style="zoom:33%;" /><p>椒盐土豆和荷包青椒每次必夹</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GoMemo</title>
    <link href="/2022/03/26/8_GoMemo/"/>
    <url>/2022/03/26/8_GoMemo/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="切片slice"><a href="#切片slice" class="headerlink" title="切片slice"></a>切片slice</h2><p>切片是一个引用类型（指针）</p><figure class="highlight go"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//对数组进行切片：</span><br>arr3 := [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>sl := []<span class="hljs-type">int</span>(arr3[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]) <span class="hljs-comment">//[start:end]</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//从字符串生成字节切片：</span><br>b:= []<span class="hljs-type">byte</span>(str)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//使用 make() 函数来创建一个切片，同时创建相关数组：</span><br><span class="hljs-comment">//len是必须的，cap可为空</span><br>s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>)<span class="hljs-comment">//[]type, len, cap</span><br></code></pre></td></tr></table></figure><ul><li>slice可索引，由 <code>len()</code> 获取长度。</li><li>数组的长度在运行时不可修改，切片的长度在运行时可修改</li></ul><h3 id="切片重组-reslicing"><a href="#切片重组-reslicing" class="headerlink" title="切片重组 reslicing"></a>切片重组 reslicing</h3><h4 id="append"><a href="#append" class="headerlink" title="append()"></a><code>append()</code></h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">func append(s[]<span class="hljs-built_in">T</span>, x ...<span class="hljs-built_in">T</span>) []<span class="hljs-built_in">T</span><br></code></pre></td></tr></table></figure><p>如果 s 的容量不足以存储新增元素，append 会分配新的切片来保证已有切片元素和新增元素的存储。</p><p>如果想将切片 y 追加到切片 x 后面，只要将第二个参数扩展成一个列表即可：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">x</span> = append(x, y...)<br></code></pre></td></tr></table></figure><h4 id="copy"><a href="#copy" class="headerlink" title="copy()"></a><code>copy()</code></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">copy</span><span class="hljs-params">(dst, src []T)</span></span> <span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>将类型为 T 的切片从源地址 src 拷贝到目标地址 dst，覆盖 dst 的相关元素，并且返回拷贝的元素个数。</p><p>1.不同类型的切片无法复制<br>2.如果s1的长度大于s2的长度，将s2中对应位置上的值替换s1中对应位置的值<br>3.如果s1的长度小于s2的长度，多余的将不做替换</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//声明map</span><br><span class="hljs-keyword">var</span> map1 <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//带初始化的声明</span><br>mapLit := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;one&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;two&quot;</span>: <span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//使用make()创建map</span><br>mp := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">float32</span>)<br></code></pre></td></tr></table></figure><p>key 可以是任意可以用 &#x3D;&#x3D; 或者 !&#x3D; 操作符比较的类型，比如 string、int、float。所以数组、切片和结构体不能作为 key；value 可以是任意类型的。</p><h3 id="用切片作为value"><a href="#用切片作为value" class="headerlink" title="用切片作为value"></a>用切片作为value</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">mp1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>][]<span class="hljs-type">int</span>)<br></code></pre></td></tr></table></figure><h3 id="测试key是否存在"><a href="#测试key是否存在" class="headerlink" title="测试key是否存在"></a>测试key是否存在</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">val1,</span> isPresent = map1[key1]<br></code></pre></td></tr></table></figure><p>如果 key1 存在于 map1，val1 就是 key1 对应的 value ，且 isPresent为true；如果 key1 不存在，val1 是一个空值，并 isPresent 为false。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//和 if 混合使用：</span><br><span class="hljs-keyword">if</span> _, ok := map1[key1]; ok &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(map1, key1)</span></span><br></code></pre></td></tr></table></figure><h3 id="for-range-的配套用法"><a href="#for-range-的配套用法" class="headerlink" title="for-range 的配套用法"></a>for-range 的配套用法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> key, value := <span class="hljs-keyword">range</span> map1 &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="map-类型的切片"><a href="#map-类型的切片" class="headerlink" title="map 类型的切片"></a>map 类型的切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">items := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br><span class="hljs-comment">//切片items的每个元素都是map类型，且值为nil</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//通过索引初始化切片中的map元素</span><br><span class="hljs-keyword">for</span> i:= <span class="hljs-keyword">range</span> items &#123;<br>items[i] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>, <span class="hljs-number">1</span>)<br>items[i][<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-comment">//下面这种操作是错误的，无法初始化真正的map元素</span><br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> items2 &#123;<br>item = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// item is only a copy of the slice element.</span><br>item[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span> <span class="hljs-comment">// This &#x27;item&#x27; will be lost on the next iteration.</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="map的排序"><a href="#map的排序" class="headerlink" title="map的排序"></a>map的排序</h3><p>需要将 key（或者 value）拷贝到一个切片，再对切片排序（使用 sort 包，详见第 7.6.6 节），然后可以使用切片的 for-range 方法打印出所有的 key 和 value。</p><h2 id="结构struct"><a href="#结构struct" class="headerlink" title="结构struct"></a>结构struct</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> identifier <span class="hljs-keyword">struct</span> &#123;<br>    field1 type1<br>    field2 type2<br>    ...<br>&#125;<br><span class="hljs-comment">//一般在函数外声明</span><br></code></pre></td></tr></table></figure><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a><strong>创建实例</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//使用 new 函数给一个新的结构体变量分配内存</span><br><span class="hljs-comment">//t为指针，结构体字段为零值</span><br>stu1 := <span class="hljs-built_in">new</span>(student) <br><span class="hljs-comment">//相当于</span><br>stu2 := &amp;student&#123;name: <span class="hljs-string">&quot;a&quot;</span>, num: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-comment">//t是student类型</span><br>stu2 := student&#123;name: <span class="hljs-string">&quot;a&quot;</span>, num: <span class="hljs-number">1</span>&#125;<br><span class="hljs-comment">//打印：</span><br><span class="hljs-comment">//stu1: &amp;&#123;a 1&#125;</span><br><span class="hljs-comment">//stu2:  &#123;a 1&#125;</span><br></code></pre></td></tr></table></figure><h3 id="选择器（selector）"><a href="#选择器（selector）" class="headerlink" title="选择器（selector）"></a><strong>选择器（selector）</strong></h3><p>无论变量是一个结构体类型还是一个结构体类型指针，都使用同样的 <strong>选择器符（selector-notation）</strong> 来引用结构体的字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">structname.fieldname<br></code></pre></td></tr></table></figure><h3 id="使用工厂方法创建结构体实例"><a href="#使用工厂方法创建结构体实例" class="headerlink" title="使用工厂方法创建结构体实例"></a>使用工厂方法创建结构体实例</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">//结构体类型</span><br><span class="hljs-built_in">type</span> File <span class="hljs-keyword">struct</span> &#123;<br>    fd      int     <span class="hljs-comment">// 文件描述符</span><br>    name    <span class="hljs-keyword">string</span>  <span class="hljs-comment">// 文件名</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//对应的工厂方法（名字以 new 或 New 开头</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewFile</span><span class="hljs-params">(fd <span class="hljs-type">int</span>, name <span class="hljs-type">string</span>)</span></span> *File &#123;<br>    <span class="hljs-keyword">if</span> fd &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &amp;File&#123;fd, name&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>调用<br>f := NewFile(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;./test.txt&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="强制使用工厂方法"><a href="#强制使用工厂方法" class="headerlink" title="强制使用工厂方法"></a>强制使用工厂方法</h3><p>可以使类型自身对外部不可见，只有工厂方法对外可见，从而使类型变成私有的，就像在面向对象语言中那样。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> matrix <span class="hljs-keyword">struct</span> &#123;<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMatrix</span><span class="hljs-params">(params)</span></span> *matrix &#123;<br>    m := <span class="hljs-built_in">new</span>(matrix) <span class="hljs-comment">// 初始化 m</span><br>    <span class="hljs-keyword">return</span> m<br>&#125;<br></code></pre></td></tr></table></figure><p>在其他包里使用工厂方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;matrix&quot;</span><br>...<br>wrong := <span class="hljs-built_in">new</span>(matrix.matrix)     <span class="hljs-comment">// 编译失败（matrix 是私有的）</span><br>right := matrix.NewMatrix(...)  <span class="hljs-comment">// 实例化 matrix 的唯一方式</span><br></code></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>Go 方法是作用在接收者（receiver）上的一个函数，接收者是某种类型的变量，几乎可以是任何类型（除了接口</p><p>类型和作用在它上面定义的方法必须在同一个包里定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(recv receiver_type)</span></span> methodName(parameter_list) (return_value_list) &#123; ... &#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> student <span class="hljs-keyword">struct</span> &#123;<br>name  <span class="hljs-type">string</span><br>score <span class="hljs-type">float32</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewStudent</span><span class="hljs-params">(name <span class="hljs-type">string</span>, score <span class="hljs-type">int</span>)</span></span> *student &#123;<br><span class="hljs-keyword">return</span> &amp;student&#123;name, score&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(stu student)</span></span> PrintStu() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;name:%v\nscore:%v&quot;</span>, stu.name, stu.score)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>stu := NewStudent(<span class="hljs-string">&quot;alice&quot;</span>, <span class="hljs-number">99</span>)<br>stu.PrintStu()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果想要方法改变接收者的数据，就在接收者的指针类型上定义该方法。</strong>（<strong>Receiver Type 推荐使用指针</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">type B struct &#123;<br>thing int<br>&#125;<br><br>func (<span class="hljs-selector-tag">b</span> *B) <span class="hljs-built_in">change</span>() &#123; <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.thing</span> = <span class="hljs-number">1</span> &#125;<br><br>func (<span class="hljs-selector-tag">b</span> B) <span class="hljs-built_in">write</span>() string &#123; return fmt<span class="hljs-selector-class">.Sprint</span>(b) &#125;<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-selector-tag">var</span> b1 B <span class="hljs-comment">// b1 是值</span><br>b1<span class="hljs-selector-class">.change</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(b1<span class="hljs-selector-class">.write</span>())<br><br>b2 := <span class="hljs-built_in">new</span>(B) <span class="hljs-comment">// b2 是指针</span><br>b2<span class="hljs-selector-class">.change</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(b2<span class="hljs-selector-class">.write</span>())<br>&#125;<br></code></pre></td></tr></table></figure><p>可以通过 getter 和 setter 方法实现包的封装特性。命名：对于 setter 方法使用 Set 前缀，对于 getter 方法只使用成员名</p><h3 id="内嵌类型的方法和继承"><a href="#内嵌类型的方法和继承" class="headerlink" title="内嵌类型的方法和继承"></a>内嵌类型的方法和继承</h3><p>当一个匿名类型被内嵌在结构体中时，匿名类型的可见方法也同样被内嵌，这在效果上等同于外层类型 <strong>继承</strong> 了这些方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;<br>x, y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Point)</span></span> Abs() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Sqrt(p.x*p.x + p.y*p.y)<br>&#125;<br><br><span class="hljs-keyword">type</span> NamedPoint <span class="hljs-keyword">struct</span> &#123;<br>Point<br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>n := &amp;NamedPoint&#123;Point&#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, <span class="hljs-string">&quot;Pythagoras&quot;</span>&#125;<br>fmt.Println(n.Abs()) <span class="hljs-comment">// 打印 5</span><br>&#125;<br></code></pre></td></tr></table></figure><p>内嵌将一个已存在类型的字段和方法注入到了另一个类型里：匿名字段上的字段和方法“晋升”成为了外层类型的字段和方法。</p><h3 id="在类型中嵌入功能"><a href="#在类型中嵌入功能" class="headerlink" title="在类型中嵌入功能"></a>在类型中嵌入功能</h3><p>A：聚合（或组合）：包含一个所需功能类型的<strong>具名</strong>字段。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Log <span class="hljs-keyword">struct</span> &#123;<br>msg <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Customer <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>log  *Log<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := <span class="hljs-built_in">new</span>(Customer)<br>c.Name = <span class="hljs-string">&quot;Barak Obama&quot;</span><br>c.log = <span class="hljs-built_in">new</span>(Log)<br>c.log.msg = <span class="hljs-string">&quot;1 - Yes we can!&quot;</span><br><span class="hljs-comment">// shorter</span><br>c = &amp;Customer&#123;<span class="hljs-string">&quot;Barak Obama&quot;</span>, &amp;Log&#123;<span class="hljs-string">&quot;1 - Yes we can!&quot;</span>&#125;&#125;<br><span class="hljs-comment">// fmt.Println(c) &amp;&#123;Barak Obama 1 - Yes we can!&#125;</span><br>c.Log().Add(<span class="hljs-string">&quot;2 - After me the world will be a better place!&quot;</span>)<br><span class="hljs-comment">//fmt.Println(c.log)</span><br>fmt.Println(c.Log())<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Log)</span></span> Add(s <span class="hljs-type">string</span>) &#123;<br>l.msg += <span class="hljs-string">&quot;\n&quot;</span> + s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Log)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> l.msg<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Customer)</span></span> Log() *Log &#123;<br><span class="hljs-keyword">return</span> c.log<br>&#125;<br></code></pre></td></tr></table></figure><p>B：内嵌：内嵌<strong>（匿名地）</strong>所需功能类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Log <span class="hljs-keyword">struct</span> &#123;<br>msg <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Customer <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>Log<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := &amp;Customer&#123;<span class="hljs-string">&quot;Barak Obama&quot;</span>, Log&#123;<span class="hljs-string">&quot;1 - Yes we can!&quot;</span>&#125;&#125;<br>c.Add(<span class="hljs-string">&quot;2 - After me the world will be a better place!&quot;</span>)<br>fmt.Println(c)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Log)</span></span> Add(s <span class="hljs-type">string</span>) &#123;<br>l.msg += <span class="hljs-string">&quot;\n&quot;</span> + s<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l *Log)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> l.msg<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Customer)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> c.Name + <span class="hljs-string">&quot;\nLog:&quot;</span> + fmt.Sprintln(c.Log.String())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Camera <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Camera)</span></span> TakeAPicture() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Click&quot;</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Phone <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Phone)</span></span> Call() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Ring Ring&quot;</span><br>&#125;<br><br><span class="hljs-keyword">type</span> CameraPhone <span class="hljs-keyword">struct</span> &#123;<br>Camera<br>Phone<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>cp := <span class="hljs-built_in">new</span>(CameraPhone)<br>fmt.Println(<span class="hljs-string">&quot;Our new CameraPhone exhibits multiple behaviors...&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;It exhibits behavior of a Camera: &quot;</span>, cp.TakeAPicture())<br>fmt.Println(<span class="hljs-string">&quot;It works like a Phone too: &quot;</span>, cp.Call())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="String-方法"><a href="#String-方法" class="headerlink" title="String()方法"></a><code>String()</code>方法</h3><p>自定义一个类型中的<code>%v</code>输出格式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">func</span> (stu student) String() string &#123;<br>return <span class="hljs-string">&quot;name:&quot;</span> + stu.name + <span class="hljs-string">&quot;\nscore:&quot;</span> + strconv.Itoa(stu.score) + <span class="hljs-string">&quot;\n&quot;</span><br>&#125;<br><br><span class="hljs-regexp">//</span>则fmt.Printf(<span class="hljs-string">&quot;%v&quot;</span>, stu)输出为<br><span class="hljs-regexp">//</span>name:alice<br><span class="hljs-regexp">//</span>score:<span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口提供了一种方式来 <strong>说明</strong> 对象的行为：如果谁能搞定这件事，它就可以用在这儿。</p><p>接口将类型能做什么、如何做分离开来，使得相同接口的变量在不同的时刻表现出不同的行为，这就是多态的本质。</p><p><strong>Go通过接口实现多态。</strong></p><p>只要一个值符合了接口，就可以作为参数调用参数为接口类型的函数。</p><h3 id="一个简单的实例"><a href="#一个简单的实例" class="headerlink" title="一个简单的实例"></a>一个简单的实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//sorter.go</span><br><span class="hljs-keyword">package</span> sorter<br><br><span class="hljs-keyword">type</span> Sorter <span class="hljs-keyword">interface</span> &#123;<br>Len() <span class="hljs-type">int</span><br>Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span><br>Swap(i, j <span class="hljs-type">int</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sort</span><span class="hljs-params">(data Sorter)</span></span> &#123;<br><span class="hljs-keyword">for</span> pass := <span class="hljs-number">1</span>; pass &lt; data.Len(); pass++ &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; data.Len()-pass; i++ &#123;<br><span class="hljs-keyword">if</span> data.Less(i+<span class="hljs-number">1</span>, i) &#123;<br>data.Swap(i, i+<span class="hljs-number">1</span>)<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Convenience types for common cases</span><br><span class="hljs-keyword">type</span> IntArray []<span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p IntArray)</span></span> Len() <span class="hljs-type">int</span>           &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(p) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p IntArray)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> p[i] &lt; p[j] &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p IntArray)</span></span> Swap(i, j <span class="hljs-type">int</span>)      &#123; p[i], p[j] = p[j], p[i] &#125;<br><br><span class="hljs-keyword">type</span> StringArray []<span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p StringArray)</span></span> Len() <span class="hljs-type">int</span>           &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(p) &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p StringArray)</span></span> Less(i, j <span class="hljs-type">int</span>) <span class="hljs-type">bool</span> &#123; <span class="hljs-keyword">return</span> p[i] &lt; p[j] &#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p StringArray)</span></span> Swap(i, j <span class="hljs-type">int</span>)      &#123; p[i], p[j] = p[j], p[i] &#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//main.go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sorter/sorter&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ints := sorter.IntArray&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">45</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>sorter.Sort(ints)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, ints)<br><br>strs := sorter.StringArray&#123;<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-string">&quot;bob&quot;</span>, <span class="hljs-string">&quot;alice&quot;</span>, <span class="hljs-string">&quot;helen&quot;</span>&#125;<br>sorter.Sort(strs)<br>fmt.Printf(<span class="hljs-string">&quot;%v&quot;</span>, strs)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口嵌套接口"><a href="#接口嵌套接口" class="headerlink" title="接口嵌套接口"></a>接口嵌套接口</h3><p>一个接口可以包含一个或多个其他的接口，这相当于直接将这些内嵌接口的方法列举在外层接口中一样。</p><p>比如接口 <code>File</code> 包含了 <code>ReadWrite</code> 和 <code>Lock</code> 的所有方法，它还额外有一个 <code>Close()</code> 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ReadWrite <span class="hljs-keyword">interface</span> &#123;<br>    Read(b Buffer) <span class="hljs-type">bool</span><br>    Write(b Buffer) <span class="hljs-type">bool</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Lock <span class="hljs-keyword">interface</span> &#123;<br>    Lock()<br>    Unlock()<br>&#125;<br><br><span class="hljs-keyword">type</span> File <span class="hljs-keyword">interface</span> &#123;<br>    ReadWrite<br>    Lock<br>    Close()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型断言：检测接口变量类型"><a href="#类型断言：检测接口变量类型" class="headerlink" title="类型断言：检测接口变量类型"></a>类型断言：检测接口变量类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//varI 为接口变量，测试在某个时刻 `varI` 是否包含类型 `T` 的值</span><br><span class="hljs-comment">//当T为引用类型时， varI.()内为*T（也就是T类型的指针</span><br><span class="hljs-comment">//T为值类型时，varI.()内为T形式</span><br><span class="hljs-keyword">if</span> v, ok := varI.(T); ok &#123;  <span class="hljs-comment">// checked type assertion</span><br>    Process(v)<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="type-switch：判断接口变量类型"><a href="#type-switch：判断接口变量类型" class="headerlink" title="type-switch：判断接口变量类型"></a>type-switch：判断接口变量类型</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">switch</span> t := areaIntf.(<span class="hljs-keyword">type</span>) &#123;<br>case *<span class="hljs-type">Square</span>:<br>fmt.<span class="hljs-type">Printf</span>(&quot;<span class="hljs-type">Type</span> <span class="hljs-type">Square</span> %<span class="hljs-type">T</span> with value %v\n&quot;, t, t)<br>case *<span class="hljs-type">Circle</span>:<br>fmt.<span class="hljs-type">Printf</span>(&quot;<span class="hljs-type">Type</span> <span class="hljs-type">Circle</span> %<span class="hljs-type">T</span> with value %v\n&quot;, t, t)<br>case nil:<br>fmt.<span class="hljs-type">Printf</span>(&quot;nil value: nothing to check?\n&quot;)<br>default:<br>fmt.<span class="hljs-type">Printf</span>(&quot;<span class="hljs-type">Unexpected</span> type %<span class="hljs-type">T</span>\n&quot;, t)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span> Shaper<br><span class="hljs-selector-tag">i</span> = &amp;triangle&#123;<span class="hljs-number">1.5</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-function"><span class="hljs-title">printArea</span><span class="hljs-params">(i)</span></span><br><span class="hljs-selector-tag">i</span> = &amp;square&#123;side: <span class="hljs-number">3</span>&#125;<br><span class="hljs-function"><span class="hljs-title">printArea</span><span class="hljs-params">(i)</span></span><br></code></pre></td></tr></table></figure><p>第1行：给 <code>i</code> 声明了接口 <code>Shaper</code> 类型，所以 <code>i</code> 的静态类型就是 <code>Shaper</code> </p><p>第2行：当我们给变量 <code>i</code> 赋一个<code>triangle</code>类型的值时，它的静态类型还是 <code>Shaper</code> ，但是它的动态类型此时是<code>triangle</code>类型。</p><p>第4行：当我们给变量 <code>i</code> 赋一个<code>square</code>类型的值时，它的静态类型还是 <code>Shaper</code> ，但是它的动态类型此时又变成了 <code>square</code>类型。</p><p>当程序运行到这里时，变量的类型，才发生了改变。即动态类型是程序运行时系统才能看见的类型。</p><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><p>当一个类型包含（内嵌）另一个类型（实现了一个或多个接口）的指针时，这个类型就可以使用（另一个类型）所有的接口方法。</p><h1 id="Go-中的面向对象"><a href="#Go-中的面向对象" class="headerlink" title="Go 中的面向对象"></a>Go 中的面向对象</h1><ul><li><p>封装（数据隐藏）：和别的 OO 语言有 4 个或更多的访问层次相比，Go 把它简化为了 2 层：</p><p>1）包范围内的：通过标识符首字母小写，对象只在它所在的包内可见</p><p>2）可导出的：通过标识符首字母大写，对象对所在包以外也可见</p></li><li><p>继承：用组合实现：内嵌一个（或多个）包含想要的行为（字段和方法）的类型；多重继承可以通过内嵌多个类型实现</p></li><li><p>多态：用接口实现：某个类型的实例可以赋给它所实现的任意接口类型的变量。类型和接口是松耦合的，并且多重继承可以通过实现多个接口实现。Go 接口不是 Java 和 C# 接口的变体，而且接口间是不相关的，并且是大规模编程和可适应的演进型设计的关键。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
      <category>Go</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Record</title>
    <link href="/2022/03/19/7_Bingyan/"/>
    <url>/2022/03/19/7_Bingyan/</url>
    
    <content type="html"><![CDATA[<blockquote><p>冰岩程序组2022春招 - 实习记录</p></blockquote><p>现在一整个人都处于很恍惚的状态</p>  <img src="/img/iFleaBooks/00.png" style="zoom:33%;" /><p>这周实习的收获太大了（虽然翘掉了两次微积分，但是管它呢</p><p>一开始连API应该长啥样都不知道，疯狂查各种实现方法，到最终完整写出来四个阶段，包括OAuth2.0的Server端和Client端。我居然真的做到了</p><p>写阶段二和阶段四确实是很痛苦的过程，感觉压根实现不出来，只能硬着头皮写，一个接一个地排查bug。幸运地还是迎来了漫漫长夜后的曙光。</p><p>这周无论是学到的东西还是做出来的东西，我都非常非常满意了。</p><hr><h1 id="CodingLog"><a href="#CodingLog" class="headerlink" title="CodingLog"></a>CodingLog</h1><h4 id="day-0-3-11"><a href="#day-0-3-11" class="headerlink" title="day 0___3.11"></a>day 0___3.11</h4><ul><li>确定选题OAuth2.0</li><li>建仓库 &amp; 思考下框架 &amp; 搞定git</li></ul><h4 id="day-1-3-12"><a href="#day-1-3-12" class="headerlink" title="day 1___3.12"></a>day 1___3.12</h4><blockquote><ul><li><p><input checked="" disabled="" type="checkbox"> <del>加入Bangumi并被安利双城之战</del></p></li><li><p><input checked="" disabled="" type="checkbox"> 学习Flask框架的使用</p><p><a href="https://dormousehole.readthedocs.io/en/1.1.2/quickstart.html">Flask中文文档</a></p><p><a href="https://segmentfault.com/a/1190000008404692">使用 Flask 开发 Web 应用（一）</a></p></li><li><p><input checked="" disabled="" type="checkbox"> 学习如何实现API</p></li><li><p><input disabled="" type="checkbox"> 系统学一下MySQL</p><p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384">廖雪峰的官方网站</a></p></li></ul></blockquote><p>今天大部分的时间都花在了学Flask和API开发上面。之前从来没接触过API这个概念，也从没仔细思考过前后端应该通过什么样的方式分离。因此尝试了解API之后感觉打开了新世界的大门。但上手写时还是毫无头绪。之前写的iFleaBooks那个小项目里虽然也涉及用户的注册登录什么的，但都运行在本地命令行，逻辑非常之简单，控制输入输出就行了。而API中使用web请求和响应实现数据传输与处理，如何通过Flask实现这一过程还是感觉有点没完全掌握。</p><h4 id="day-2-3-13"><a href="#day-2-3-13" class="headerlink" title="day 2___3.13"></a>day 2___3.13</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 继续学Flask，把官方文档看完</li><li><input checked="" disabled="" type="checkbox"> 看完MySQL</li><li><input disabled="" type="checkbox"> 完成SQLAlchemy部分</li><li><input checked="" disabled="" type="checkbox"> 完成注册登录的错误输入处理</li><li><input disabled="" type="checkbox"> 琢磨一下邮箱验证</li></ul></blockquote><p>学了一上午数据库，尝试使用Python进行数据库操作的过程也还算顺利，也没有出现什么令人崩溃的bug。</p><p>继续进行SQLALchemy的操作。</p><h4 id="day-3-3-14"><a href="#day-3-3-14" class="headerlink" title="day 3___3.14"></a>day 3___3.14</h4><blockquote><ul><li><p><input checked="" disabled="" type="checkbox"> SQLAlchemy完成</p></li><li><p><input checked="" disabled="" type="checkbox"> 了解 <a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">OAuth2.0</a> 机制 &amp; 具体过程</p></li></ul></blockquote><p>被bug按在地上反复摩擦的一天…..上午总算是把阶段一粗糙地完成了。为什么感觉起来很简单但写起来还是超难。进度很显然太慢了。开始研究OAuth2.0。</p><p>不过值得一提的是实现了科学上网！在StackOverflow上查到了好几个bug的解决方法，以及google到了code和token的原理，真的很好用了。</p><h4 id="day-4-3-15"><a href="#day-4-3-15" class="headerlink" title="day 4__3.15"></a>day 4__3.15</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> OAuth2.0 第三⽅⽹站注册</li><li><input checked="" disabled="" type="checkbox"> OAuth2.0 处理 Client ID 和 回调链接，redirect并返回 code </li><li><input checked="" disabled="" type="checkbox"> OAuth2.0 处理 Client ID 、 Client secrets 和 code，向第三⽅⽹站提供对应⽤⼾的 token</li></ul></blockquote><p>在逻辑上完成了OAuth2.0第二阶段部分。</p><h4 id="day-5-3-16"><a href="#day-5-3-16" class="headerlink" title="day 5__3.16"></a>day 5__3.16</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> OAuth2.0 调试</li><li><input checked="" disabled="" type="checkbox"> 番剧查看和收藏功能</li><li><input disabled="" type="checkbox"> 搜索收藏的番剧</li></ul></blockquote><p>有一种熬过黑暗迎来黎明的感觉。OAuth2.0实在太难写了，昨天写得整个人丧心病狂丧失希望，但还是坚持捋顺逻辑写了下去。今天调试出来好像流程都能对上</p><p>第三阶段部分相比之下就简单快乐很之多，下午加晚上除了搜索部分，其他基本功能都完成差不多了。</p><h4 id="day-6-3-17"><a href="#day-6-3-17" class="headerlink" title="day 6__3.17"></a>day 6__3.17</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 完成第三阶段基本要求</li><li><input checked="" disabled="" type="checkbox"> 添加注册的邮箱验证功能</li><li><input checked="" disabled="" type="checkbox"> 改一下第一阶段</li><li><input checked="" disabled="" type="checkbox"> 第四阶段：用户跳转授权时后端获取token、使用token连接Bangumi的api</li></ul></blockquote><p>今天应该是收获最大的一天。无论是实现邮箱验证功能还是实现OAuth2.0的Client，感觉自己越来越理解其中所涉及的知识和原理了。</p><p>以及StackOverFlow太好用了 又成功解决好几个bug</p><h4 id="day-7-3-18"><a href="#day-7-3-18" class="headerlink" title="day 7___3.18"></a>day 7___3.18</h4><blockquote><ul><li><input checked="" disabled="" type="checkbox"> 第四阶段完成绑定账号后的数据导入</li><li><input checked="" disabled="" type="checkbox"> 重新捋一下第二阶段（获取code时的get&amp;post）</li><li><input checked="" disabled="" type="checkbox"> 最终debug</li></ul></blockquote><p>最后一天，好舍不得啊感觉。算是把四个阶段都基本完成啦，虽然很多环节都离完美差得远，但已经很满足了</p><hr><h2 id="OAuth2-0-Server"><a href="#OAuth2-0-Server" class="headerlink" title="OAuth2.0 Server:"></a>OAuth2.0 Server:</h2><ol><li><p>client在<code>/aouth2.0/sign</code>注册应用，自定义密匙，获得client ID</p></li><li><p>进行第三方登录时，用户跳转到授权页<code>/oauth2.0/show?client_id=xxxxxxxx&amp;redirect_url=http://xxxxxx/redirect</code>，并登录：</p><figure class="highlight perl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs perl">&#123; <br><br><span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;2333@moe.com&quot;</span>, <br><br><span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;233333&quot;</span> <br><br>&#125;<br></code></pre></td></tr></table></figure><p>server确认信息后回调redirect_url，并返回code：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123; <br><br>&quot;<span class="hljs-selector-tag">code</span>&quot;:<br><span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsImlhdCI6MTY0NzU3OTc2OSwiZXhwIjoxNjQ3NTgwMzY5fQ.Mw.ajuLe4SskMkCVK_aIlUIjetDoUndZ3F92rW_ud6BjRdLSniuSKum2xPrtQvQrCK1V3yVq9gBJSwGKWnYamDqQ&quot;</span> <br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>client获取code后，向<code>/oauth2.0/granttoken</code>发送client_id、client_secrets和code：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-attr">&quot;client_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;IPfapHgWOn58ycjMCRBD&quot;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-attr">&quot;client_secrets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>    <br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsImlhdCI6MTY0NzU4MDg4OCwiZXhwIjoxNjQ3NTgxNDg4fQ.Mw.dUPFfwWfPsyzijw5lGnx6VuaKlYBb21zlSycCkyFRVpjjEAGR2gQejmR7hWi_2JXjYAPmPoyBpkV4D6LuTGarg&quot;</span><br>    <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>server返回用户对应的token。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsImlhdCI6MTY0NzU4MDk0NiwiZXhwIjoxNjQ3NTg0NTQ2fQ.eyJlbWFpbCI6IjIzMzNAbW9lLmNvbSIsInVpZCI6M30.Kl_pri4sOp9ErP2yseuy-h_q4_884Qit6yEI0U4akUoDnBl4e6r3tmHVJj3MR5YQ7O7KmSEZAu_H-6VuD_nj7w&quot;</span><br>    <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>获取用户信息的api：<code>/aouth2.0/getinfo</code></p><p>向<code>/aouth2.0/getinfo</code>发送token</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsImlhdCI6MTY0NzU4MDk0NiwiZXhwIjoxNjQ3NTg0NTQ2fQ.eyJlbWFpbCI6IjIzMzNAbW9lLmNvbSIsInVpZCI6M30.Kl_pri4sOp9ErP2yseuy-h_q4_884Qit6yEI0U4akUoDnBl4e6r3tmHVJj3MR5YQ7O7KmSEZAu_H-6VuD_nj7w&quot;</span><br>    <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>server返回：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>    <span class="hljs-string">&quot;avator&quot;</span>: <span class="hljs-string">&quot;https://bangumi.tv/user/675222&quot;</span>,<br>    <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;2333@moe.com&quot;</span>,<br>    <span class="hljs-string">&quot;intro&quot;</span>: <span class="hljs-string">&quot;here is moee&quot;</span>,<br>    <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;moee&quot;</span>,<br>    <span class="hljs-string">&quot;uname&quot;</span>: <span class="hljs-string">&quot;2333@moe.com&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="OAuth2-0-Client"><a href="#OAuth2-0-Client" class="headerlink" title="OAuth2.0 Client:"></a>OAuth2.0 Client:</h2><ol><li><p>用户点击”绑定第三方bangumi账号“，跳转到bangumi授权页</p><p><code>https://bgm.tv/oauth/authorize?client_id=bgm22106232fa6225d8a&amp;response_type=code&amp;redirect_uri=http%3A%2F%2F127.0.0.1%3A5000%2Foauth%2Fredirect</code></p><p>进行授权。</p></li><li><p>用户成功授权后Bangumi Server跳转回redirect_uri（<code>http://127.0.0.1:5000/oauth2.0/redirect</code>），并返回code。</p></li><li><p>Client接收code，并向<code>https://bgm.tv/oauth/access_token</code>使用code换取token：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST https:<span class="hljs-regexp">//</span>bgm.tv<span class="hljs-regexp">/oauth/</span>access_token<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;<br>      <span class="hljs-string">&quot;grant_type&quot;</span>: <span class="hljs-string">&quot;authorization_code&quot;</span>,<br>      <span class="hljs-string">&quot;client_id&quot;</span>: &#x27;bgm<span class="hljs-number">22106232</span>fa<span class="hljs-number">6225</span>d8a&#x27;,<br>      <span class="hljs-string">&quot;client_secret&quot;</span>: &#x27;<span class="hljs-number">7402491845</span>d1b66ce<span class="hljs-number">1360</span>c<span class="hljs-number">3329</span>3b472a&#x27;,<br>      <span class="hljs-string">&quot;code&quot;</span>: code,<br>      <span class="hljs-string">&quot;redirect_uri&quot;</span>: &#x27;http://127.0.0.1:<span class="hljs-number">5000</span>/oauth/redirect&#x27;<br>&#125;<br></code></pre></td></tr></table></figure><p>接收到Server返回的access_token：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxxxxxxx&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;expires_in&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">604800</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;token_type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Bearer&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;refresh_token&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxxxxxxx&quot;</span><br>    <span class="hljs-attr">&quot;user_id&quot;</span> <span class="hljs-punctuation">:</span> xxxxx<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>Client将获取的access_token写入数据库，利用bangumi提供的api导入用户番剧收藏数据。</p><p>(bangumi提供的api似乎有点bug，没法正常导出番剧评论，但番剧名和状态是可以正常导出的)</p></li></ol><h2 id="邮箱验证："><a href="#邮箱验证：" class="headerlink" title="邮箱验证："></a>邮箱验证：</h2><p>利用Flask的<strong>Flask-Mail</strong>扩展向用户发送验证邮件</p><p>token使用itsdangerous的TimedJSONWebSignatureSerializer()生成，有效期为10分钟</p><p>用户点击验证链接，server接收到token进行解析，判断uid与session中的uid是否相符，相符则验证成功</p><h2 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h2><p>MySQL + SQLAlchemy</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+--------------------+</span><br><span class="hljs-section">| Tables_in_bangumoe |</span><br><span class="hljs-section">+--------------------+</span><br>| users              |<br>| info               |<br>| oauth              |<br>| anime              |<br><span class="hljs-section">| collection         |</span><br><span class="hljs-section">+--------------------+</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Note for Python</title>
    <link href="/2022/02/10/5_PythonNote/"/>
    <url>/2022/02/10/5_PythonNote/</url>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h3 id="动态语言-amp-静态语言："><a href="#动态语言-amp-静态语言：" class="headerlink" title="动态语言 &amp; 静态语言："></a>动态语言 &amp; 静态语言：</h3><ul><li><p><strong>动态语言：</strong>变量本身类型不固定。使用变量无需声明，但使用前必须赋值，赋值后变量才被创建。</p><p><strong>e.g. Python、Ruby、JavaScript</strong></p></li><li><p><strong>静态语言：</strong>变量类型固定。在定义变量时必须指定变量类型，赋值时变量与对象的类型必须相匹配or进行转化。</p><p><strong>e.g. Java、C、C++</strong></p></li></ul><blockquote><p>动态语言和静态语言很大的不同在于：函数和类的定义不是编译时定义的，而是运行时动态创建的。</p></blockquote><h3 id="引用赋值："><a href="#引用赋值：" class="headerlink" title="引用赋值："></a>引用赋值：</h3><p>像Python、JS这类动态语言，基本上都是使用引用赋值。在引用赋值中，变量名和真实值分开保存。变量名保存的是真实值的一个指针，对变量赋值时，也是将这个指针赋给新变量，原来的“引用”则断开了。</p><h3 id="Python中的不可变类型-amp-可变类型："><a href="#Python中的不可变类型-amp-可变类型：" class="headerlink" title="Python中的不可变类型 &amp; 可变类型："></a>Python中的不可变类型 &amp; 可变类型：</h3><ul><li><p><strong>不可变类型： Number、String、Tuple</strong></p><p>当变量为不可变类型时，无法在内存中直接修改这个变量（如：100、’hello‘）。如果尝试对不可变类型进行修改，就会断开原始的引用，重新指向新的对象。</p></li><li><p><strong>可变类型：List、Dictionary、Set</strong></p><p>可以在内存中进行修改，修改可变类型的值不会断开原始引用。</p></li></ul><h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><p>主动发起TCP链接，接收服务器返回数据，实现一次完整的网络通信。</p><p>以获取新浪首页HTML文件为例：</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#tcp基本连接新浪首页获取并打印http头</span><br><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> ssl<br><br>s = ssl.wrap_socket(socket.socket())<br><br><span class="hljs-comment">#建立连接</span><br>s.connect((<span class="hljs-string">&#x27;www.sina.com.cn&#x27;</span>, <span class="hljs-number">443</span>))<br><br>s.send(<span class="hljs-string">b&quot;GET / HTTP/1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n&quot;</span>)<br><br><span class="hljs-comment">#接受数据</span><br>buf = []<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    d = s.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">if</span> d:<br>        buf.append(d)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>data = <span class="hljs-string">b&quot;&quot;</span>.join(buf)<br><br><span class="hljs-comment">#关闭tcp连接</span><br>s.close()<br><br>data = data.split(<span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#打印请求头把流数据进行解码</span><br><span class="hljs-built_in">print</span>(data[<span class="hljs-number">0</span>].decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-comment">#写进文件html，存入本地文件夹</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;E:/SE/CODE/Python/sina.html&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(data[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Note</category>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iFleaBooks</title>
    <link href="/2022/02/06/4_iFleaBooks/"/>
    <url>/2022/02/06/4_iFleaBooks/</url>
    
    <content type="html"><![CDATA[<h1 id="iFleaBooks"><a href="#iFleaBooks" class="headerlink" title="iFleaBooks"></a>iFleaBooks</h1><p>Linux环境下的二手书交易系统</p><p>是一个C++练手项目，实现了较完整的交易系统前后台功能，包括用户注册、登录、浏览商品、发布商品、修改信息，管理员进行后台数据管理，本地数据载入与更新等，并基于Linux命令行进行交互。</p><p><strong>GitHub链接：</strong><a href="https://github.com/yinn-x/iFleaBooks">https://github.com/yinn-x/iFleaBooks</a></p><hr><h3 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a><strong>开发环境：</strong></h3><p>Ubuntu &amp; VS Code</p><h3 id="实现功能："><a href="#实现功能：" class="headerlink" title="实现功能："></a><strong>实现功能：</strong></h3><p><strong>User：</strong></p><ul><li>注册 &amp; 登录 &amp; 注销；</li><li>浏览书库 &#x2F; 搜索书籍 &amp; 查看书的详细信息；</li><li>购买二手书 &amp; 查看已购订单；</li><li>发布二手书 &amp; 修改详细信息；</li><li>下架自己的发布 &amp; 查看卖出订单；</li><li>个人信息管理 &amp; 钱包充值。</li></ul><p><strong>Admin：</strong></p><ul><li>查看 &#x2F; 检索所有书籍 &amp; 下架书籍；</li><li>查看和管理所有订单；</li><li>查看和管理所有用户信息。</li></ul><h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a><strong>效果</strong>：</h3><p>登录 &amp; 注册 ：</p>  <img src="/img/iFleaBooks/11.png" style="zoom:50%;" /><p>​          </p><p>浏览：</p> <img src="/img/iFleaBooks/22.png" style="zoom:50%;" /><p>​           </p><p>买书：</p>  <img src="/img/iFleaBooks/2.png" style="zoom:50%;" /><p>​       </p><p>钱包充值：</p>  <img src="/img/iFleaBooks/3.png" style="zoom:50%;" /><p>​     </p><p>管理员：</p><img src="/img/iFleaBooks/4.png" style="zoom:50%;" /><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Note of C++ Primer</title>
    <link href="/2022/02/02/3_Note%20of%20C++%20Primer/"/>
    <url>/2022/02/02/3_Note%20of%20C++%20Primer/</url>
    
    <content type="html"><![CDATA[<h1 id="1-从-C-到-C"><a href="#1-从-C-到-C" class="headerlink" title="1. 从 C 到 C++"></a>1. 从 C 到 C++</h1><p>一些 C++ 的新特性：</p><p><strong>多态：</strong></p><ul><li><p>静态多态：</p><p>（1）重载（函数重载 &amp; 运算符重载） </p><p>（2）泛型（函数模板 &amp; 类模板）</p></li><li><p>动态多态：虚函数</p></li></ul><p><strong>类：</strong></p><ul><li><p>继承（基类 &amp; 子类）</p></li><li><p>封装 （类访问修饰符 &amp; 友元）</p></li><li><p>其他细节：（1）类的默认函数</p><p>​                   （2）运算符重载</p><p>​                   （3）this 指针</p></li></ul><p><strong>其他：</strong></p><ul><li><p>引用变量</p></li><li><p>范围 for 语句</p></li><li><p>迭代器</p></li><li><p>内联函数</p></li><li><p>new &amp; delete</p></li><li><p>流式文件读写</p></li><li><p>函数的默认参数</p></li></ul><h2 id="2-多态"><a href="#2-多态" class="headerlink" title="2. 多态"></a>2. 多态</h2><h4 id="（1）泛型编程"><a href="#（1）泛型编程" class="headerlink" title="（1）泛型编程"></a>（1）泛型编程</h4><p>泛型编程在 C++ 中主要通过模板函数和模板类实现。</p><p>函数模板的性质：</p><ol><li>函数模板不是真正的函数，只是编译时生成具体函数的一个”模子”。</li><li>函数模板不是编译一份满足多重需要，而是为每一种替换它的函数编译生成一份新函数。</li></ol><p>函数模板的实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(T&amp; a, T&amp; b)</span></span>&#123;<br>T t = a;<br>a = b, b = t;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>template用于声明开始泛型编程，typyname用于声明泛指类型。</p></li><li><p>自动类型推导调用:</p><p><code> Swap(a, b);</code> </p><p>该调用属于隐式实例化。</p></li><li><p>具体类型显式调用：</p><p><code>Swap&lt;int&gt;(a, b);</code></p><p>该调用属于显式实例化。</p></li></ul><p>显式具体化：</p><p>一种模板定义，实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;&gt; <span class="hljs-type">void</span> <span class="hljs-built_in">Swap</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-type">int</span>&amp;, <span class="hljs-type">int</span>&amp;)&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>或：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp;, <span class="hljs-type">int</span>&amp;)</span></span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>意为“当实参为两个int类型时，不要使用Swap()模板来生成函数定义，而应使用专门为int类型显式地定义地具体函数”。</p><h4 id="（2）动态多态"><a href="#（2）动态多态" class="headerlink" title="（2）动态多态"></a>（2）动态多态</h4><p>动态多态主要通过继承重写基类的虚函数实现，在程序运行时根据基类的指针（或引用）指向的对象来确定自己具体调用哪一个类的虚函数。</p><h2 id="3-类的4个默认函数"><a href="#3-类的4个默认函数" class="headerlink" title="3. 类的4个默认函数"></a>3. 类的4个默认函数</h2><p>类的4个默认函数分别为构造函数、析构函数、拷贝函数和赋值函数。通常来讲，1个类包含多个构造函数（由1个或多个普通构造函数与1个拷贝构造函数组成）、1个赋值函数和1个析构函数。若不编写上述函数，C++编译器会自动为类产生4个缺省的函数。然而，使用默认的构造函数与析构函数，相当于放弃了自主“初始化”与“清除”机会。同时，默认的拷贝构造函数、赋值函数采用“位拷贝”而非“值拷贝”，类中含指针变量时将出错。</p><h4 id="（1）构造函数"><a href="#（1）构造函数" class="headerlink" title="（1）构造函数"></a>（1）构造函数</h4><p>构造函数是与类同名、无返回值的特殊成员函数，提供对成员变量初始化的方法。程序创建时将自动调用构造函数。</p><ul><li><p><strong>默认的构造函数：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> grade;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>() &#123;<br><br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>默认构造函数无参，仅负责创建对象而不进行赋值操作。</p></li><li><p><strong>无参带赋值操作的构造函数：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> grade;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>() &#123;<br>name = <span class="hljs-string">&#x27;xiaoming&#x27;</span>;<br>        garde = <span class="hljs-number">90</span>;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>该函数将覆盖默认构造函数，它不仅创建对象还负责成员初始化。</p></li><li><p><strong>带参的带赋值操作的构造函数：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> grade;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>(string n, <span class="hljs-type">int</span> g) &#123;<br>name = n;<br>        garde = g;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>该构造函数也将覆盖默认的构造函数。</p><p><strong>注意：</strong>一旦类中只包含带参的构造函数而不包含不带参的构造函数时，将无法创建不带参数的对象，程序将报错。</p><p><strong>解决办法：</strong>手动写一个默认构造函数，或给带参函数赋默认参数。</p></li></ul><p><strong>也可通过初始化表进行初始化：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> grade;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Student</span>(string n, <span class="hljs-type">int</span> g): <span class="hljs-built_in">name</span>(x), <span class="hljs-built_in">grade</span>(g) &#123;<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="（2）拷贝构造函数-amp-赋值函数"><a href="#（2）拷贝构造函数-amp-赋值函数" class="headerlink" title="（2）拷贝构造函数 &amp; 赋值函数"></a>（2）拷贝构造函数 &amp; 赋值函数</h4><p>默认的拷贝构造函数：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Student(<span class="hljs-params">const</span> Student&amp; <span class="hljs-params">stu</span>)</span><br></code></pre></td></tr></table></figure><p>默认的赋值函数：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Student<span class="hljs-meta">&amp; operater=(const Student&amp; stu)</span><br></code></pre></td></tr></table></figure><p>拷贝构造函数是在创建对象时调用，而赋值函数只能被已存在的对象调用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>)</span></span>;<br><span class="hljs-function">string <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-string">&quot;world&quot;</span>)</span></span>;<br>string c = a; <span class="hljs-comment">//调用了拷贝构造函数，也可写成stirng c(a);</span><br>c = b; <span class="hljs-comment">//调用了赋值函数 </span><br></code></pre></td></tr></table></figure><h4 id="（3）析构函数"><a href="#（3）析构函数" class="headerlink" title="（3）析构函数"></a>（3）析构函数</h4><p>也是无参无返回类型的特殊成员函数，但它不能随意调用，没有重载，只有在类对象的生命期结束时，由系统自动调用，用来在系统释放对象前做一些清理工作。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>Note</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>About</title>
    <link href="/2022/02/01/1_About/"/>
    <url>/2022/02/01/1_About/</url>
    
    <content type="html"><![CDATA[<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><p>这里是YiNN的个人博客！</p><p>本人目前HUST SE大一在读 在写程序这块还是个萌新</p><p>爱好是画点小画，虽然好像很久没画了</p><p>这是我的<a href="https://heeeeeeeeeha.lofter.com/">lofter账号</a></p><p>然后平时大概是比较喜欢看电影刷剧啥的</p><p>这是我的<a href="https://www.douban.com/people/185275812/">豆瓣</a></p><p>(没写完待续)</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>My First Blog</title>
    <link href="/2022/01/28/2_MyFirstBlog/"/>
    <url>/2022/01/28/2_MyFirstBlog/</url>
    
    <content type="html"><![CDATA[<p>深夜被一些诡异的报错反复折磨，气到重装Ubuntu。漫长的安装等待中想到，要不边等边把个人博客给建了吧，于是一通操作两天后有了现在的这篇blog。</p><p>鉴于本人的菜鸡水平应该也没办法分享出什么技术，这个博客大概就是给自己的各种笔记啥的找个归属地。</p><p>所以本人的寒假又多了点乐子：把博客建得像模像样一点（误</p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
